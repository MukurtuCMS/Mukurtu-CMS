<?php

/**
 * @file
 * Install, update and uninstall functions for the mukurtu_dictionary module.
 */

use Drupal\og\Og;
use Drupal\og\Entity\OgRole;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_install().
 */
function mukurtu_dictionary_install() {
  // Language Communities are groups.
  try {
  Og::addGroup('language_community', 'language_community');
  } catch (InvalidArgumentException $e) {
    // Intentionally left blank, already a group.
  }

  // Create Language community roles.
  $languageStewardRole = OgRole::create([
    'name' => 'language steward',
  ]);
  $languageStewardRole->setGroupType('language_community');
  $languageStewardRole->setGroupBundle('language_community');
  $languageStewardRole->save();

  $languageContributorRole = OgRole::create([
    'name' => 'language contributor',
  ]);
  $languageContributorRole->setGroupType('language_community');
  $languageContributorRole->setGroupBundle('language_community');
  $languageContributorRole->save();

  // Install field storage definitions for our dictionary types.
  $fieldManager = \Drupal::service('entity_field.manager');

  $types = [
    ['node', 'dictionary_word'],
    ['node', 'word_list'],
    ['paragraph', 'dictionary_word_entry'],
    ['paragraph', 'sample_sentence'],
  ];

  foreach ($types as $type) {
    list($entity_type_id, $bundle) = $type;
    $fields = $fieldManager->getFieldDefinitions($entity_type_id, $bundle);
    foreach ($fields as $field_name => $field) {
      if ($field instanceof FieldStorageDefinitionInterface) {
        try {
            \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition($field_name, $entity_type_id, 'mukurtu_dictionary', $field);
        } catch (Exception $e) {
          // Intentionally left blank. Many fields will already exist. This is fine.
        }
      }
    }
  }
}
