<?php

/**
 * @file
 * Provide Mukurtu Protocols (access control).
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\og\Og;
use Drupal\og\OgGroupAudienceHelperInterface;

define("MUKURTU_PROTOCOL_GRANTS_REALM", "mukurtu");
define("MUKURTU_PROTOCOL_ANY", "any");
define("MUKURTU_PROTOCOL_ALL", "all");
define("MUKURTU_PROTOCOL_FIELD_NAME_COMMUNITY", "field_mukurtu_community");
define("MUKURTU_PROTOCOL_FIELD_NAME_READ", "field_mukurtu_protocol_read");
define("MUKURTU_PROTOCOL_FIELD_NAME_WRITE", "field_mukurtu_protocol_write");

/**
 * Create the Mukurtu protocol field for a given node bundle type.
 */
function mukurtu_protocol_create_protocol_field($bundle_type) {
  $bundle_skip_list = ['community', 'protocol'];
  if (in_array($bundle_type, $bundle_skip_list)) {
    return;
  }

  // Read Access Protocol Field.
  $settings['field_name'] = MUKURTU_PROTOCOL_FIELD_NAME_READ;
  $settings['field_config']['label'] = "Mukurtu Protocol - View Access";
  $settings['field_config']['description'] = "Mukurtu Protocol Helper Text Goes Here";
  Og::createField(OgGroupAudienceHelperInterface::DEFAULT_FIELD, 'node', $bundle_type, $settings);

  $field = FieldConfig::create([
    'field_name' => 'field_mukurtu_protocol_r_scope',
    'entity_type' => 'node',
    'bundle' => $bundle_type,
    'label' => 'Mukurtu Protocol - View Scope',
  ]);
  $field->save();

  // Write Access Protocol Field.
  $settings['field_name'] = MUKURTU_PROTOCOL_FIELD_NAME_WRITE;
  $settings['field_config']['label'] = "Mukurtu Protocol - Update Access";
  $settings['field_config']['description'] = "Mukurtu Protocol Helper Text Goes Here";
  Og::createField(OgGroupAudienceHelperInterface::DEFAULT_FIELD, 'node', $bundle_type, $settings);

  $field = FieldConfig::create([
    'field_name' => 'field_mukurtu_protocol_w_scope',
    'entity_type' => 'node',
    'bundle' => $bundle_type,
    'label' => 'Mukurtu Protocol - Update Scope',
  ]);
  $field->save();

}

/**
 * Implements hook_entity().
 */
function mukurtu_protocol_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Protocols only work with nodes.
  if ($entity->getEntityType()->id() == 'node') {
    $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
    return $protocol_manager->checkAccess($entity, $operation, $account);
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_grants().
 */
function mukurtu_protocol_node_grants(AccountInterface $account, $op) {
  $grants = [];

  if ($op == 'view') {
    $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
    $grantIds = $protocol_manager->getUserGrantIds($account);
    $grants[MUKURTU_PROTOCOL_GRANTS_REALM] = $grantIds;
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function mukurtu_protocol_node_access_records(NodeInterface $node) {
  $mode = 'all';
  $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
  $protocols = $protocol_manager->getNodeProtocols($node);

  $grants = [];

  // For "any" protocol, create a grant for each single ID.
  if ($mode == MUKURTU_PROTOCOL_ANY) {
    foreach ($protocols as $p) {
      $p_id = $protocol_manager->getProtocolGrantId([$p]);
      if ($p_id) {
        $grants[] = [
          'realm' => MUKURTU_PROTOCOL_GRANTS_REALM,
          'gid' => $p_id,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }
  }

  // For "all" protocols, create a single grant for the effective protocol ID.
  if ($mode == MUKURTU_PROTOCOL_ALL) {
    $p_id = $protocol_manager->getProtocolGrantId($protocols);
    if ($p_id) {
      $grants[] = [
        'realm' => MUKURTU_PROTOCOL_GRANTS_REALM,
        'gid' => $p_id,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ];
    }
  }

  return $grants;
}

/**
 * Implements hook_entity_bundle_create().
 */
function mukurtu_protocol_entity_bundle_create($entity_type_id, $bundle) {
  // For any new node type that is defined, add the protocol field.
  if ($entity_type_id == 'node') {
    mukurtu_protocol_create_protocol_field($bundle);
  }
}
