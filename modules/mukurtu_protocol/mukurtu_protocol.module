<?php

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\mukurtu_protocol\Entity\ProtocolControl;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Database\Query\AlterableInterface;

/**
 * @file
 * Provide Mukurtu Protocols (access control).
 */

/**
 * Implements hook_entity_insert().
 */
function mukurtu_protocol_entity_insert($entity) {
  ProtocolControl::removeInactiveControlEntities($entity);
}

/**
 * Implements hook_entity_update().
 */
function mukurtu_protocol_entity_update($entity) {
  ProtocolControl::removeInactiveControlEntities($entity);
}

/**
 * Implements hook_entity_delete().
 */
function mukurtu_protocol_entity_delete($entity) {
  if (ProtocolControl::supportsProtocolControl($entity)) {
    ProtocolControl::removeAllControlEntities($entity->getEntityTypeId(), $entity->uuid());
  }
}

/**
 * Implements hook_form_alter().
 */
function mukurtu_protocol_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['field_protocol_control'])) {
    $form['actions']['submit']['#submit'] = array_merge([['\Drupal\mukurtu_protocol\Plugin\Field\FieldWidget\ProtocolControlWidget', 'customSubmit']], $form['actions']['submit']['#submit']);
        //$form['actions']['submit']['#submit'] = array_merge($form['actions']['submit']['#submit'], [['\Drupal\mukurtu_protocol\Plugin\Field\FieldWidget\ProtocolControlWidget', 'customSubmit']]);    //$form['actions']['submit']['#submit'] = array_merge($form['actions']['submit']['#submit'], [['\Drupal\mukurtu_protocol\Plugin\Field\FieldWidget\ProtocolControlWidget', 'customSubmit']]);    //$form['actions']['submit']['#submit'] = array_merge($form['actions']['submit']['#submit'], [['\Drupal\mukurtu_protocol\Plugin\Field\FieldWidget\ProtocolControlWidget', 'customSubmit']]);$form['actions']['submit']['#submit'] = array_merge($form['actions']['submit']['#submit'], [['\Drupal\mukurtu_protocol\Plugin\Field\FieldWidget\ProtocolControlWidget', 'customSubmit']]);
  }
}

/**
 * Implements hook_entity_type_build().
 */
function mukurtu_protocol_entity_type_build(array &$entity_types) {
  // This is where we attach the Mukurtu protocol access handlers.
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['node']->setHandlerClass('access', 'Drupal\mukurtu_protocol\MukurtuProtocolNodeAccessControlHandler');
  $entity_types['media']->setHandlerClass('access', 'Drupal\mukurtu_protocol\MukurtuProtocolMediaAccessControlHandler');

  // We are taking over some of the default OG entity handling.
  $entity_types['og_role']->setHandlerClass('list_builder', 'Drupal\mukurtu_protocol\Entity\MukurtuOgRoleListBuilder');
  //$entity_types['media']->setHandlerClass('access', 'Drupal\mukurtu_protocol\MukurtuProtocolAccessControlHandler');
}

/**
 * Implements hook_entity_base_field_info().
 */
function mukurtu_protocol_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'node' || $entity_type->id() == 'media') {
    // Define a computed field for community affiliation.
    $fields['field_communities'] = BaseFieldDefinition::create('entity_reference')
      ->setName('field_communities')
      ->setLabel(t('Communities'))
      ->setDescription(t('Community affiliations'))
      ->setComputed(TRUE)
      ->setClass('Drupal\mukurtu_protocol\Plugin\Field\CommunityAffiliationItemList')
      ->setSetting('target_type', 'community')
      ->setCardinality(-1)
      ->setDisplayConfigurable('view', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_node_grants().
 */
function mukurtu_protocol_node_grants(AccountInterface $account, $op) {
  $grants = [];

  if ($op == 'view') {
    $grants['protocols'] = ProtocolControl::getAccountGrantIds($account);
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function mukurtu_protocol_node_access_records(NodeInterface $node) {
  /** @var \Drupal\mukurtu_protocol\Entity\ProtocolControlInterface $protocolControlEntity */
  // Load the protocol control entity.
  $protocolControlEntity = ProtocolControl::getProtocolControlEntity($node);
  if (!$protocolControlEntity) {
    return [];
  }

  return $protocolControlEntity->getNodeAccessGrants();
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Handle query accessCheck for protocol entities. This only
 * scopes it to visibility. It does not handle specific access
 * considerations like update/delete.
 */
function mukurtu_protocol_query_protocol_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  // Grab the protocol table alias.
  $tables = $query->getTables();
  $protocolTable = array_search('protocol', array_map(fn($e) => $e['table'], $tables));

  if ($protocolTable) {
    // Join with the protocol field table;
    $query->leftJoin('protocol_field_data', 'pf', "{$protocolTable}.id = pf.id");

    // Join with the OG membership table.
    $query->leftJoin('og_membership', 'og', "{$protocolTable}.id = og.entity_id");

    // Build the conditions to capture strict protocols.
    $strict_conditions = $query->andConditionGroup()
      // Limit to the user being used in the query.
      ->condition('og.uid', $account->id())
      // Limit to protocol memberships only.
      ->condition('og.entity_type', 'protocol')
      // Limit to active memberships only.
      ->condition('og.state', 'active');

    // Build the conditions to capture open protocols.
    $open_conditions = $query->andConditionGroup()
      ->condition('pf.field_access_mode', 'open');

    // User can only see open protocols or
    // strict protocols they are a member of.
    $open_or_strict = $query->orConditionGroup()
      ->condition($strict_conditions)
      ->condition($open_conditions);
    $query->condition($open_or_strict);
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Filter a protocol query down to members only.
 */
function mukurtu_protocol_query_protocol_members_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  // Grab the protocol table alias.
  $tables = $query->getTables();
  $protocolTable = array_search('protocol', array_map(fn($e) => $e['table'], $tables));

  if ($protocolTable) {
    // Join with the OG membership table.
    $query->leftJoin('og_membership', 'og', "{$protocolTable}.id = og.entity_id");

    // Build the conditions to capture strict protocols.
    $member_conditions = $query->andConditionGroup()
      // Limit to the user being used in the query.
      ->condition('og.uid', $account->id())
      // Limit to protocol memberships only.
      ->condition('og.entity_type', 'protocol')
      // Limit to active memberships only.
      ->condition('og.state', 'active');
    $query->condition($member_conditions);
  }
}
