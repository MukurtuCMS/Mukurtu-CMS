<?php

/**
 * @file
 * Provide Mukurtu Protocols (access control).
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\og\Og;
use Drupal\og\OgGroupAudienceHelperInterface;
use Drupal\og\Entity\OgMembership;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\Condition;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;

define("MUKURTU_PROTOCOL_GRANTS_REALM", "mukurtu");
define("MUKURTU_PROTOCOL_ANY", "any");
define("MUKURTU_PROTOCOL_ALL", "all");
define("MUKURTU_PROTOCOL_FIELD_NAME_COMMUNITY", "field_mukurtu_community");
define("MUKURTU_PROTOCOL_FIELD_NAME_READ", "field_mukurtu_protocol_read");
define("MUKURTU_PROTOCOL_FIELD_NAME_READ_SCOPE", "field_mukurtu_protocol_r_scope");
define("MUKURTU_PROTOCOL_FIELD_NAME_WRITE", "field_mukurtu_protocol_write");
define("MUKURTU_PROTOCOL_FIELD_NAME_WRITE_SCOPE", "field_mukurtu_protocol_w_scope");

/**
 * Create the Mukurtu protocol field for a given node bundle type.
 */
function mukurtu_protocol_create_protocol_field($entity_type, $bundle_type) {
  $bundle_skip_list = ['node' => ['community', 'protocol']];
  if (!empty($bundle_skip_list[$entity_type]) && in_array($bundle_type, $bundle_skip_list[$entity_type])) {
    return;
  }

  // Read Access Protocol Field.
  $settings['field_name'] = MUKURTU_PROTOCOL_FIELD_NAME_READ;
  $settings['field_config']['label'] = "Mukurtu Protocol - View Access";
  $settings['field_config']['description'] = "Mukurtu Protocol Helper Text Goes Here";
  $settings['field_config']['handler'] = 'default';
  $settings['field_config']['handler_settings']['target_bundles'] = ['protocol'];
  $settings['field_storage_config']['target_type'] = "node";

  Og::createField(OgGroupAudienceHelperInterface::DEFAULT_FIELD, $entity_type, $bundle_type, $settings);

  // OG doesn't actually use the field settings we give it.
  // We will set the protocol fields to target protocols only here.
  $field_storage_config = FieldStorageConfig::loadByName($entity_type, MUKURTU_PROTOCOL_FIELD_NAME_READ);
  $field_storage_config->setSetting('target_type', 'node');
  $field_storage_config->save();
  $field_config = FieldConfig::loadByName($entity_type, $bundle_type, MUKURTU_PROTOCOL_FIELD_NAME_READ);
  $field_config->setSettings($settings['field_config']);
  $field_config->save();

  $field = FieldConfig::create([
    'field_name' => 'field_mukurtu_protocol_r_scope',
    'entity_type' => $entity_type,
    'bundle' => $bundle_type,
    'label' => 'Mukurtu Protocol - View Scope',
  ]);
  $field->save();

  // Write Access Protocol Field.
  $settings['field_name'] = MUKURTU_PROTOCOL_FIELD_NAME_WRITE;
  $settings['field_config']['label'] = "Mukurtu Protocol - Update Access";
  $settings['field_config']['description'] = "Mukurtu Protocol Helper Text Goes Here";
  $settings['field_config']['handler'] = 'default';
  $settings['field_config']['handler_settings']['target_bundles'] = ['protocol'];
  $settings['field_storage_config']['target_type'] = "node";

  Og::createField(OgGroupAudienceHelperInterface::DEFAULT_FIELD, $entity_type, $bundle_type, $settings);

  // OG doesn't actually use the field settings we give it.
  // We will set the protocol fields to target protocols only here.
  $field_storage_config = FieldStorageConfig::loadByName($entity_type, MUKURTU_PROTOCOL_FIELD_NAME_WRITE);
  $field_storage_config->setSetting('target_type', 'node');
  $field_storage_config->save();
  $field_config = FieldConfig::loadByName($entity_type, $bundle_type, MUKURTU_PROTOCOL_FIELD_NAME_WRITE);
  $field_config->setSettings($settings['field_config']);
  $field_config->save();

  $field = FieldConfig::create([
    'field_name' => 'field_mukurtu_protocol_w_scope',
    'entity_type' => $entity_type,
    'bundle' => $bundle_type,
    'label' => 'Mukurtu Protocol - Update Scope',
  ]);
  $field->save();

}

/**
 * Implements hook_entity().
 */
function mukurtu_protocol_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Protocols only work with nodes & media.
  $type = $entity->getEntityType()->id();
  if ($type == 'node' || $type == 'media') {
    $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
    return $protocol_manager->checkAccess($entity, $operation, $account);
  }

  return AccessResult::neutral();
}


/**
 * Implements hook_entity_insert().
 */
function mukurtu_protocol_entity_insert(EntityInterface $entity) {
  // Update protocol tables.
  $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
  if ($protocol_manager->hasProtocolFields($entity)) {
    $protocol_manager->handleProtocolUpdate($entity);
  }

  // Handle OgMemberships from here on.
  if (!$entity instanceof OgMembership) {
    return;
  }

  // Handle user being added to a community.
  if ($entity->get('entity_type')->value == 'node' && $entity->get('entity_bundle')->value == 'community') {
    $uid = $entity->getOwnerId();
    $nid = $entity->get('entity_id')->value;
    $protocol_manager->processCommunityMembershipInsert($nid, $uid);
  }

  // Invalidate cache for content under the protocol with the membership change.
  if ($entity->get('entity_type')->value == 'node' && $entity->get('entity_bundle')->value == 'protocol') {
    $nid = $entity->get('entity_id')->value;
    $protocol = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $protocol_manager->invalidateProtocolCache($protocol);
  }
}

/**
 * Implements hook_entity_update().
 */
function mukurtu_protocol_entity_update(EntityInterface $entity) {
  $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
  if ($protocol_manager->hasProtocolFields($entity)) {
    $protocol_manager->handleProtocolUpdate($entity);
  }

  // Handle OgMemberships from here on.
  if (!$entity instanceof OgMembership) {
    return;
  }

  // Invalidate cache for content under the protocol with the membership change.
  if ($entity->get('entity_type')->value == 'node' && $entity->get('entity_bundle')->value == 'protocol') {
    $nid = $entity->get('entity_id')->value;
    $protocol = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $protocol_manager->invalidateProtocolCache($protocol);
  }
}

/**
 * Implements hook_entity_delete().
 */
function mukurtu_protocol_entity_delete(EntityInterface $entity) {
  // Clean up protocol entries for deleted entity.
  $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
  if ($protocol_manager->hasProtocolFields($entity)) {
    $protocol_manager->clearProtocolAccess($entity);
  }

  // Handle OgMemberships from here on.
  if (!$entity instanceof OgMembership) {
    return;
  }

  // Handle user being removed from a community.
  if ($entity->get('entity_type')->value == 'node' && $entity->get('entity_bundle')->value == 'community') {
    $uid = $entity->getOwnerId();
    $nid = $entity->get('entity_id')->value;
    $protocol_manager->processCommunityMembershipDelete($nid, $uid);
  }

  // Invalidate cache for content under the protocol with the deleted membership.
  if ($entity->get('entity_type')->value == 'node' && $entity->get('entity_bundle')->value == 'protocol') {
    $nid = $entity->get('entity_id')->value;
    $protocol = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $protocol_manager->invalidateProtocolCache($protocol);
  }
}

/**
 * Implements hook_node_grants().
 */
function mukurtu_protocol_node_grants(AccountInterface $account, $op) {
  $grants = [];

  if ($op == 'view') {
    $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
    $grantIds = $protocol_manager->getUserGrantIds($account);
    $grants[MUKURTU_PROTOCOL_GRANTS_REALM] = $grantIds;
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function mukurtu_protocol_node_access_records(NodeInterface $node) {
  $mode = 'all';
  $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
  $protocols = $protocol_manager->getProtocols($node);

  $grants = [];

  // For "any" protocol, create a grant for each single ID.
  if ($mode == MUKURTU_PROTOCOL_ANY) {
    foreach ($protocols as $p) {
      $p_id = $protocol_manager->getProtocolGrantId([$p]);
      if ($p_id) {
        $grants[] = [
          'realm' => MUKURTU_PROTOCOL_GRANTS_REALM,
          'gid' => $p_id,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }
  }

  // For "all" protocols, create a single grant for the effective protocol ID.
  if ($mode == MUKURTU_PROTOCOL_ALL) {
    $p_id = $protocol_manager->getProtocolGrantId($protocols);
    if ($p_id) {
      $grants[] = [
        'realm' => MUKURTU_PROTOCOL_GRANTS_REALM,
        'gid' => $p_id,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ];
    }
  }

  return $grants;
}

/**
 * Implements hook_entity_bundle_create().
 */
function mukurtu_protocol_entity_bundle_create($entity_type_id, $bundle) {
  // For any new node or media type that is defined, add the protocol field.
  if ($entity_type_id == 'node'|| $entity_type_id == 'media') {
    mukurtu_protocol_create_protocol_field($entity_type_id, $bundle);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function mukurtu_protocol_entity_type_alter(array &$entity_types) {
  //$entity_types['media']->setHandlerClass('access', '\Drupal\Core\Entity\EntityAccessControlHandler');
  //$entity_types['media']->setHandlerClass('query_access', '\Drupal\Core\Entity\QueryAccess\QueryAccessHandler');
  //$entity_types['media']->setHandlerClass('query_access', '\Drupal\entity\QueryAccess\QueryAccessHandler');
  //$entity_types['media']->setHandlerClass('permission_provider', '\Drupal\Core\Entity\EntityPermissionProvider');
}

/**
 * Implements hook_query_TAG_alter().
 */
function mukurtu_protocol_query_media_access_alter(AlterableInterface $query) {
  $account = User::load(\Drupal::currentUser()->id());
  $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');

  // Protocol Set IDs the *user* has access to.
  $protocol_set_ids = $protocol_manager->getUserGrantIds($account);

  // Get the protocol set IDs for the media.
  $query->leftJoin('mukurtu_protocol_access', 'mpa', 'media_field_data.mid = mpa.id');
  $query->condition('mpa.entity_type', 'media');

  if (empty($protocol_set_ids)) {
    // User doesn't have access to any protocols.
    $query->condition('protocol_set_id', 0);
  } else {
    // User can access media for any of these protocol sets.
    $or = new Condition('OR');
    foreach ($protocol_set_ids as $protocol_set_id) {
      $or->condition('protocol_set_id', $protocol_set_id);
    }

    $query->condition($or);
  }

  $query->distinct();
}

/**
 * Implements hook_entity_type_build().
 */
function mukurtu_protocol_entity_type_build(array &$entity_types) {
  if (!$entity_types['media']->hasHandlerClass('query_access')) {
    //\Drupal::logger('mukurtu_protocol')->notice("added media");
    $entity_types['media']->setHandlerClass('query_access', \Drupal\entity\QueryAccess\QueryAccessHandler::class);
  }
}

/**
 * Implements hook_form_alter().
 */
function mukurtu_protocol_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // When we a protocol scope/protocol list pairing, only display the protocol
  // list when the any/all options are selected on the scope.
  $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
  foreach ($protocol_manager->protocolFields as $protocol_field) {
    if (isset($form[$protocol_field['protocol']]) && isset($form[$protocol_field['scope']])) {
      $form[$protocol_field['protocol']]['#states'] = [
        'visible' => [':input[name="' . $protocol_field['scope'] . '[0][value]' . '"]' => [['value' => 'any'], ['value' => 'all']]],
      ];
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function mukurtu_protocol_entity_presave(EntityInterface $entity) {
  $protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
  if ($protocol_manager->hasProtocolFields($entity)) {
    foreach ($protocol_manager->protocolFields as $protocol_field) {
      if ($entity->hasField($protocol_field['protocol']) && $entity->hasField($protocol_field['scope'])) {
        //kint($entity);
        dpm($entity->get($protocol_field['scope'])->value);
        dpm($entity->get($protocol_field['protocol'])->getValue());
      }
    }
  }
}
