<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\mukurtu_protocol\CulturalProtocolControlledInterface;
use Drupal\mukurtu_protocol\CulturalProtocols;
use Drupal\mukurtu_protocol\Entity\MukurtuMedia;
use Drupal\mukurtu_protocol\Entity\MukurtuNode;
use Drupal\mukurtu_protocol\Entity\MukurtuUser;
use Drupal\node\NodeInterface;
use Drupal\mukurtu_protocol\Entity\CommunityInterface;
use Drupal\mukurtu_protocol\Entity\ProtocolInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\og\Og;
use Drupal\Core\Access\AccessResult;

/**
 * @file
 * Provide Mukurtu Protocols (access control).
 */

/**
 * Implements hook_field_info_alter().
 */
function mukurtu_protocol_field_info_alter(&$info)
{
  if (isset($info['comment']['default_formatter'])) {
    $info['comment']['default_formatter'] = 'mukurtu_comment_default';
  }
  if (isset($info['comment'])) {
    $info['comment']['list_class'] = '\Drupal\mukurtu_protocol\MukurtuCommentFieldItemList';
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function mukurtu_protocol_entity_bundle_info_alter(array &$bundles)
{
  if (isset($bundles['user']['user'])) {
    $bundles['user']['user']['class'] = MukurtuUser::class;
  }

  // For any node bundles missing a bundle class, give it our basic Mukurtu
  // class for protocol support.
  if (isset($bundles['node'])) {
    foreach ($bundles['node'] as $key => $bundle) {
      if (!isset($bundle['class']) && !in_array($key, ['article', 'page'])) {
        $bundles['node'][$key]['class'] = MukurtuNode::class;
      }
    }
  }

  // For any media bundles missing a bundle class, give it our basic Mukurtu
  // class for protocol support.
  if (isset($bundles['media'])) {
    foreach ($bundles['media'] as $key => $bundle) {
      if (!isset($bundle['class'])) {
        $bundles['media'][$key]['class'] = MukurtuMedia::class;
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function mukurtu_protocol_views_data_alter(array &$data)
{
  if (isset($data['users'])) {
    // Add the communities field to Views.
    $data['users']['communities'] = [
      'title' => t('Communities'),
      'field' => [
        'id' => 'user_community',
      ],
    ];
  }
}

/**
 * Implements hook_theme().
 */
function mukurtu_protocol_theme($existing, $type, $theme, $path)
{
  return [
    'community' => [
      'render element' => 'elements',
      'file' => 'community.page.inc',
    ],
    'protocol' => [
      'render element' => 'elements',
      'file' => 'protocol.page.inc',
    ],
    'communities_page' => [
      'variables' => [
        'communities' => NULL,
      ],
    ],
    'manage_community' => [
      'variables' => [
        'community' => NULL,
        'links' => NULL,
        'sharing' => NULL,
        'membership_display' => NULL,
        'members' => NULL,
        'description' => NULL,
        'protocols' => NULL,
        'notices' => NULL,
      ],
    ],
    'manage_protocol' => [
      'variables' => [
        'protocol' => NULL,
        'links' => NULL,
        'sharing' => NULL,
        'membership_display' => NULL,
        'members' => NULL,
        'description' => NULL,
        'communities' => NULL,
        'comment_status' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_field_storage_info().
 */
function mukurtu_protocol_entity_field_storage_info(EntityTypeInterface $entity_type)
{
  if ($entity_type->id() == 'node') {
    return MukurtuNode::bundleFieldDefinitions($entity_type, '', []);
  }
  if ($entity_type->id() == 'media') {
    return MukurtuMedia::bundleFieldDefinitions($entity_type, '', []);
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 *
 */
function mukurtu_protocol_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context)
{
  // Build the community breadcrumbs.
  if ($route_match->getRouteName() === 'entity.community.canonical') {
    $community = $route_match->getParameter('community');
    $depth = 0;
    if ($community instanceof CommunityInterface) {
      $branch = [];
      while (($parent = $community->getParentCommunity()) && $depth < 4) {
        $branch[] = $parent;
        $community = $parent;
        $depth += 1;
      }
      $branch = array_reverse($branch);

      // Need less aggressive caching so the breadcrumbs are built for each
      // specific community.
      $breadcrumb->addCacheTags(['community_list']);
      $breadcrumb->addCacheContexts(['url']);

      // Add each parent community in order.
      foreach ($branch as $sub) {
        $breadcrumb->addLink(\Drupal\Core\Link::createFromRoute($sub->getName(), 'entity.community.canonical', ['community' => $sub->id()]));
      }
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function mukurtu_protocol_local_tasks_alter(&$local_tasks)
{
  // Remove the default OG admin routes for our special group types.
  unset($local_tasks['og.og_admin_routes:community.og_admin_routes']);
  unset($local_tasks['og.og_admin_routes:protocol.og_admin_routes']);
}

/**
 * Implements hook_entity_insert().
 */
function mukurtu_protocol_entity_insert($entity)
{
  if ($entity instanceof CulturalProtocolControlledInterface) {
    $entity->buildAccessGrants();

    // Make Devel Generate work with protocols.
    // Right now it makes no attempt to do anything sensible, it simply attaches
    // random protocols to the entity.
    if (isset($entity->devel_generate)) {
      $protocols = \Drupal::entityTypeManager()
        ->getStorage('protocol')
        ->getQuery()
        ->accessCheck(TRUE)
        ->execute();
      $max = count($protocols);
      $pkeys = array_rand($protocols, mt_rand(1, $max));
      if (!is_array($pkeys)) {
        $pkeys = [$pkeys];
      }
      $newProtocols = [];
      foreach ($pkeys as $pkey) {
        $newProtocols[] = $protocols[$pkey];
      }
      $privacyOpts = ['any', 'all'];
      $entity->setProtocols($newProtocols);
      $entity->setSharingSetting($privacyOpts[array_rand($privacyOpts)]);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function mukurtu_protocol_entity_update($entity)
{
  if ($entity instanceof CulturalProtocolControlledInterface) {
    $entity->buildAccessGrants();
  }
}

/**
 * Implements hook_entity_delete().
 */
function mukurtu_protocol_entity_delete($entity)
{
  // Delete config for community/protocol LC project directory description.
  if ($entity instanceof CommunityInterface) {
    Drupal::configFactory()->getEditable('mukurtu_local_contexts.settings')->clear('mukurtu_local_contexts_manage_community_' . $entity->id() . '_projects_directory_description')->save();
  }
  if ($entity instanceof ProtocolInterface) {
    Drupal::configFactory()->getEditable('mukurtu_local_contexts.settings')->clear('mukurtu_local_contexts_manage_protocol_' . $entity->id() . '_projects_directory_description')->save();
  }
  if ($entity instanceof CulturalProtocolControlledInterface) {
    $entity->removeAccessGrants();
  }
}

/**
 * Implements hook_entity_type_build().
 */
function mukurtu_protocol_entity_type_build(array &$entity_types)
{
  // This is where we attach the Mukurtu protocol access handlers.
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  if (isset($entity_types['node'])) {
    $entity_types['node']->setHandlerClass('access', 'Drupal\mukurtu_protocol\MukurtuProtocolNodeAccessControlHandler');
  }

  if (isset($entity_types['media'])) {
    $entity_types['media']->setHandlerClass('access', 'Drupal\mukurtu_protocol\MukurtuProtocolMediaAccessControlHandler');
  }

  // Mukurtu Comment handlers.
  if (isset($entity_types['comment'])) {
    $entity_types['comment']->setHandlerClass('access', 'Drupal\mukurtu_protocol\MukurtuCommentAccessControlHandler');
    $entity_types['comment']->setHandlerClass('storage', 'Drupal\mukurtu_protocol\MukurtuCommentStorage');
    $entity_types['comment']->setFormClass('default', 'Drupal\mukurtu_protocol\MukurtuCommentForm');
  }

  // We are taking over some of the default OG entity handling.
  if (isset($entity_types['og_role'])) {
    $entity_types['og_role']->setHandlerClass('list_builder', 'Drupal\mukurtu_protocol\Entity\MukurtuOgRoleListBuilder');
    //$entity_types['media']->setHandlerClass('access', 'Drupal\mukurtu_protocol\MukurtuProtocolAccessControlHandler');
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function mukurtu_protocol_entity_base_field_info(EntityTypeInterface $entity_type)
{
  $fields = [];

  if ($entity_type->id() == 'node' || $entity_type->id() == 'media') {
    // Define a computed field for community affiliation.
    $fields['field_communities'] = BaseFieldDefinition::create('entity_reference')
      ->setName('field_communities')
      ->setLabel(t('Communities'))
      ->setDescription(t('Community affiliations'))
      ->setComputed(TRUE)
      ->setClass('Drupal\mukurtu_protocol\Plugin\Field\CommunityAffiliationItemList')
      ->setSetting('target_type', 'community')
      ->setCardinality(-1)
      ->setDisplayConfigurable('view', TRUE);
  }

  if ($entity_type->id() == 'user') {
    // Define a computed field for community affiliation for users.
    $fields['field_communities'] = BaseFieldDefinition::create('entity_reference')
      ->setName('field_communities')
      ->setLabel(t('Communities'))
      ->setDescription(t('Community affiliations'))
      ->setComputed(TRUE)
      ->setClass('Drupal\mukurtu_protocol\Plugin\Field\UserCommunityMembershipItemList')
      ->setSetting('target_type', 'community')
      ->setCardinality(-1)
      ->setDisplayConfigurable('view', TRUE);
  }

  if ($entity_type->id() == 'community') {
    $fields['field_protocols'] = BaseFieldDefinition::create('entity_reference')
      ->setName('field_protocols')
      ->setLabel(t('Cultural Protocols'))
      ->setDescription(t('Cultural Protocols for this community.'))
      ->setComputed(TRUE)
      ->setClass('Drupal\mukurtu_protocol\Plugin\Field\CommunityProtocolsItemList')
      ->setSetting('target_type', 'protocol')
      ->setCardinality(-1)
      ->setDisplayConfigurable('view', TRUE);
  }

  /**
   * Override the default OG user handler with mukurtu_user_selection.
   */
  if ($entity_type->id() == 'og_membership') {
    $fields['uid'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(new TranslatableMarkup('Username'))
      ->setDescription(new TranslatableMarkup('The user ID of the member.'))
      ->setSetting('target_type', 'user')
      ->setSetting('handler', 'mukurtu_user_selection')
      ->setConstraints(['UniqueOgMembership' => []])
      ->setDisplayOptions('form', [
        'type' => 'og_autocomplete',
        'weight' => -1,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'match_limit' => 10,
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setRequired(TRUE);
  }
  return $fields;
}

/**
 * Implements hook_node_grants().
 */
function mukurtu_protocol_node_grants(AccountInterface $account, $op)
{
  $grants = [];

  if ($op == 'view') {
    $grants['protocols'] = CulturalProtocols::getAccountGrantIds($account);
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function mukurtu_protocol_node_access_records(NodeInterface $node)
{
  if ($node instanceof CulturalProtocolControlledInterface) {
    return $node->getAccessGrants();
  }
  return [];
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Handle query accessCheck for media entities. This only
 * scopes it to visibility. It does not handle specific access
 * considerations like update/delete.
 */
function mukurtu_protocol_query_media_access_alter(AlterableInterface $query)
{
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  // Don't alter for UID 1.
  if ($account->id() == 1) {
    return;
  }

  // Get the user's grants.
  $grants = CulturalProtocols::getAccountGrantIds($account);

  // Grab the media table alias.
  $tables = $query->getTables();
  $mediaTable = array_search('media', array_map(fn($e) => $e['table'], $tables));
  if (!$mediaTable) {
    $mediaTable = array_search('media_field_data', array_map(fn($e) => $e['table'], $tables));
  }

  if ($mediaTable) {
    $query->leftJoin('mukurtu_protocol_access', 'mpa', "{$mediaTable}.mid = mpa.id");
    $query->condition('mpa.entity_type_id', 'media');
    $query->condition('mpa.grant_view', 1);

    // User can access media for any of these protocol set grants.
    $inProtocolGrantSet = $query->orConditionGroup();
    foreach ($grants as $grant) {
      $inProtocolGrantSet->condition('protocol_set_id', $grant);
    }
    $query->condition($inProtocolGrantSet);
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Handle query accessCheck for protocol entities. This only
 * scopes it to visibility. It does not handle specific access
 * considerations like update/delete.
 */
function mukurtu_protocol_query_protocol_access_alter(AlterableInterface $query)
{
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  // Grab the protocol table alias.
  $tables = $query->getTables();
  $protocolTable = array_search('protocol', array_map(fn($e) => $e['table'], $tables));

  if ($protocolTable) {
    // Join with the protocol field table;
    $query->leftJoin('protocol_field_data', 'pf', "{$protocolTable}.id = pf.id");

    // Join with the OG membership table.
    $query->leftJoin('og_membership', 'og', "{$protocolTable}.id = og.entity_id");

    // Build the conditions to capture strict protocols.
    $strict_conditions = $query->andConditionGroup()
      // Limit to the user being used in the query.
      ->condition('og.uid', $account->id())
      // Limit to protocol memberships only.
      ->condition('og.entity_type', 'protocol')
      // Limit to active memberships only.
      ->condition('og.state', 'active');

    // Build the conditions to capture open protocols.
    $open_conditions = $query->andConditionGroup()
      ->condition('pf.field_access_mode', 'open');

    // User can only see open protocols or
    // strict protocols they are a member of.
    $open_or_strict = $query->orConditionGroup()
      ->condition($strict_conditions)
      ->condition($open_conditions);
    $query->condition($open_or_strict);
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Filter a protocol query down to members only.
 */
function mukurtu_protocol_query_protocol_members_alter(AlterableInterface $query)
{
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  // Grab the protocol table alias.
  $tables = $query->getTables();
  $protocolTable = array_search('protocol', array_map(fn($e) => $e['table'], $tables));

  if ($protocolTable) {
    // Join with the OG membership table.
    $query->leftJoin('og_membership', 'og', "{$protocolTable}.id = og.entity_id");

    // Build the conditions to capture strict protocols.
    $member_conditions = $query->andConditionGroup()
      // Limit to the user being used in the query.
      ->condition('og.uid', $account->id())
      // Limit to protocol memberships only.
      ->condition('og.entity_type', 'protocol')
      // Limit to active memberships only.
      ->condition('og.state', 'active');
    $query->condition($member_conditions);
  }
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function mukurtu_protocol_field_widget_single_element_entity_browser_entity_reference_form_alter(array &$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context)
{
  $display_type = $context["widget"]->getSetting("field_widget_display");

  // Only supporting these two display modes for entity browser at the moment.
  if ($display_type !== 'label' && $display_type !== 'rendered_entity') {
    return;
  }

  // Provide an id to distinguish inaccessible references from each other.
  $id = 0;
  foreach ($element['current']['items'] as $delta => &$item) {
    // Try to find the entity we are displaying.
    $entity = NULL;
    if ($display_type == 'label') {
      $entity = $element["entity_browser"]["#default_value"][$delta] ?? NULL;
    }
    if ($display_type == 'rendered_entity') {
      $entity = $item["display"]["#node"] ?? NULL;
    }

    // If the entity is protocol controlled, check if it should be displayed.
    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    if ($entity && ($entity instanceof CulturalProtocolControlledInterface) && !$entity->access('view')) {
      $id += 1;
      $item['#attributes']['class'][] = 'inaccessible-reference';

      $item['display'] = [
        '#markup' => "<div>" . Html::escape(t("#@id. This @entity_type_label is not available to you.", [
          '@id' => $id,
          '@entity_type_label' => lcfirst($entity->getEntityType()->getLabel()),
        ])) . "</div>"
      ];
    }
  }
}

/**
 * Implements hook_preprocess_field__community__og_group__community().
 */
function mukurtu_protocol_preprocess_field__community__og_group__community(array &$variables): void
{
  $variables['label'] = t('Community role');
  $description = $variables['items'][0]['content']['#value'];
  $variables['items'][0]['content']['#value'] = str_replace(
    'the group',
    'a community',
    $description
  ) . '.';
}

/**
 * Implements hook_preprocess_field__protocol__og_group__protocol().
 */
function mukurtu_protocol_preprocess_field__protocol__og_group__protocol(array &$variables): void
{
  $variables['label'] = t('Protocol role');
  $description = $variables['items'][0]['content']['#value'];
  $variables['items'][0]['content']['#value'] = str_replace(
    'the group',
    'a protocol',
    $description
  ) . '.';
}

/**
 * Implements hook_form_form_id_alter().
 *
 * Hide the thumbnail, banner image, and featured content fields when creating a
 * protocol from /protocols/protocol/add.
 */
function mukurtu_protocol_form_protocol_add_form_alter(&$form, FormStateInterface $form_state) {
  unset($form['field_banner_image'], $form['field_featured_content'], $form['field_thumbnail_image']);
}

/**
 * Implements hook_form_form_id_alter().
 */
function mukurtu_protocol_form_og_membership_form_alter(&$form, FormStateInterface $form_state) {
  // Make roles field required on og forms.
  $form['roles']['widget']['#required'] = TRUE;

  // Add validation to prevent users from being added to protocols without
  // adding them first to the protocol owning communities.
  $group = \Drupal::requestStack()->getCurrentRequest()->attributes->get('group');
  if ($group instanceof ProtocolInterface) {
    // Only add the form validator if this form is in the protocol context.
    $form['#validate'][] = 'add_protocol_member_form_validate';
  }
  // After changing a user's roles, flush the cache so pages reflect that.
  drupal_flush_all_caches();
}

function add_protocol_member_form_validate(&$form, FormStateInterface $form_state)
{
  $uid = isset($form_state->getValue('uid')[0]['target_id']) ? $form_state->getValue('uid')[0]['target_id'] : NULL;

  if ($uid) {
    $userToAdd = \Drupal::entityTypeManager()->getStorage('user')->load($uid) ?? NULL;
    if ($userToAdd) {
      $protocolId = isset($form['entity_id']['#value']) ? $form['entity_id']['#value'] : NULL;
      if ($protocolId) {
        $protocol = \Drupal::entityTypeManager()->getStorage('protocol')->load($protocolId);
        if ($protocol) {
          $protocolCommunities = $protocol->getCommunities();
          $isMember = FALSE;
          foreach ($protocolCommunities as $c) {
            // Check user's membership within this protocol's communities.
            if ($c->getMembership($userToAdd)) {
              $isMember = TRUE;
              continue;
            }
          }
          // If the user to be added is not a member of ANY of the protocol's
          // owning communities, throw an error.
          if (!$isMember) {
            $form_state->setErrorByName('uid', t('Cannot add <a href=@user-page>@userName</a>. User is not a member of any of <a href=@protocol-page>@protocolName</a>\'s communities.', [
              '@user-page' => Url::fromRoute('entity.user.canonical', ['user' => $userToAdd->id()])->toString(),
              '@userName' => $userToAdd->label(),
              '@protocol-page' => Url::fromRoute('mukurtu_protocol.manage_protocol', ['group' => $protocol->id()])->toString(),
              '@protocolName' => $protocol->getName(),
            ]));
          }
        }
      }
    }
  }
}
