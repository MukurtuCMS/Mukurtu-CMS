<?php

/**
 * @file
 * Provide Mukurtu Community Records.
 */

define("MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS", "field_mukurtu_community_records");
define("MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ALL_COMMUNITY_RECORDS", "field_all_community_records");
define("MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD", "field_mukurtu_original_record");

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_bundle_create().
 */
function mukurtu_community_records_entity_bundle_create($entity_type_id, $bundle) {
  // For any new node type that is defined, add the community record field.
  if ($entity_type_id == 'node') {
    mukurtu_community_records_create_community_records_field($entity_type_id, $bundle);
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function mukurtu_community_records_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'node') {
    // Define a computed field for community records. This flattens out the
    // parent and all child records into a single list.
    $fields['field_all_community_records'] = BaseFieldDefinition::create('entity_reference')
      ->setName(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ALL_COMMUNITY_RECORDS)
      ->setLabel(t('All Community Records'))
      ->setDescription(t('All community records, including the current record.'))
      ->setComputed(TRUE)
      ->setClass('Drupal\mukurtu_community_records\Plugin\Field\CommunityRecordsItemList')
      ->setSetting('target_type', 'node')
      ->setCardinality(-1)
      ->setDisplayConfigurable('view', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_theme().
 */
function mukurtu_community_records_theme($existing, $type, $theme, $path) {
  return [
    'mukurtu_select_community_record_type' => [
      'template' => 'mukurtu-select-community-record-type',
      'variables' => ['node' => NULL, 'types' => NULL],
    ],
/*     'node__community_records_full' => [
      'template' => 'node--community-records-full',
      'variables' => ['node' => NULL],
    ], */
  ];
}

/**
 * Return true if the entity has the given record field.
 */
function mukurtu_community_records_has_record_field(EntityInterface $entity, $field_name) {
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id == 'node' || $entity_type_id == 'media') {
    if (method_exists($entity, 'hasField')) {
      return $entity->hasField($field_name);
    }
  }

  return FALSE;
}

/**
 * Create the community field for an entity type/bundle.
 */
function mukurtu_community_records_create_community_records_field($entity_type_id, $bundle) {
  if ($entity_type_id != 'node' || $bundle == 'protocol' || $bundle == 'community') {
    return;
  }

  // Create the community records field.
  $field_storage = FieldStorageConfig::loadByName($entity_type_id, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS);
  $field = FieldConfig::loadByName($entity_type_id, $bundle, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS);
  if ($field_storage && empty($field)) {
    $new_field = $field_storage->toArray();
    unset($new_field['uuid']);
    $new_field['label'] = "Community Records";
    $new_field['bundle'] = $bundle;
    $new_field['settings'] = [
      'handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [$bundle => $bundle],
        'auto_create' => FALSE,
      ],
    ];
    $new_field = FieldConfig::create($new_field);
    try {
      $new_field->save();
    } catch (Exception $e) {

    }
  }

  // Create the original record field (parent record).
  $field_storage = FieldStorageConfig::loadByName($entity_type_id, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD);
  $field = FieldConfig::loadByName($entity_type_id, $bundle, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD);

  if ($field_storage && empty($field)) {
    $new_field = $field_storage->toArray();
    unset($new_field['uuid']);
    $new_field['label'] = "Original Record";
    $new_field['bundle'] = $bundle;
    $new_field['settings'] = [
      'handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [$bundle => $bundle],
        'auto_create' => FALSE,
      ],
    ];
    $new_field = FieldConfig::create($new_field);
    try {
      $new_field->save();
    } catch (Exception $e) {

    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function mukurtu_community_records_entity_insert(EntityInterface $entity) {
  mukurtu_community_records_entity_update($entity);
}

/**
 * Attach a record to an item.
 */
function mukurtu_community_records_attach_record(EntityInterface $original, EntityInterface $record) {
  // Set the record's original record field to reference the item.
  if (mukurtu_community_records_has_record_field($record, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)) {
    $record->set(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD, [$original->id()]);
    $record->save();
  }
}

/**
 * Detach a record from an item.
 */
function mukurtu_community_records_detach_record(EntityInterface $original, EntityInterface $record) {
  if (mukurtu_community_records_has_record_field($record, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)) {
    $record->set(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD, []);
    $record->save();
  }
}

/**
 * Check if an entity is a community record.
 */
function mukurtu_community_records_is_community_record(EntityInterface $entity) {
  if (mukurtu_community_records_has_record_field($entity, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)) {
    $original = $entity->get(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)->getValue();
    if (!empty($original)) {
      return $original['target_id'];
    }
  }

  return FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function mukurtu_community_records_entity_update(EntityInterface $entity) {
  if (mukurtu_community_records_has_record_field($entity, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS)) {
    $new_record_refs = $entity->get(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS)->getValue();
    $old_record_refs = [];

    if (isset($entity->original)) {
      $old_record_refs = $entity->original->get(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS)->getValue();
    }

    $flatten = function ($e) {
      return isset($e['target_id']) ? $e['target_id'] : NULL;
    };
    $new_records = array_map($flatten, $new_record_refs);
    $old_records = array_map($flatten, $old_record_refs);

    // For each record in the updated entity, make sure the relationship is set
    // on the community record.
    $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($new_records);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        mukurtu_community_records_attach_record($entity, $node);
      }
    }

    // If any records have been removed, unset the relationship on the child.
    $records_to_remove = array_diff($old_records, $new_records);
    if (!empty($records_to_remove)) {
      $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($records_to_remove);
      if (!empty($nodes)) {
        foreach ($nodes as $node) {
          mukurtu_community_records_detach_record($entity, $node);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function mukurtu_community_records_entity_delete(EntityInterface $entity) {
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function mukurtu_community_records_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (isset($fields[MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS])) {
    $fields[MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS]->addConstraint('ValidCommunityRecord', []);
  }
}

/**
 * Implements hook_entity_view().
 */
function mukurtu_community_records_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() != 'node'
    || $view_mode != 'community_records_full'
    || !$entity->hasField(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)) {
    return;
  }

  // Don't display the title (as a field) on the community record view.
  $records = $entity->get(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ALL_COMMUNITY_RECORDS)->referencedEntities();
  if (!empty($records) && (count($records) > 1)) {
    unset($build['title']);
  }
}


/**
 * Implements hook_entity_view_mode_alter().
 */
function mukurtu_community_records_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($entity->getEntityTypeId() != 'node'
    || $view_mode != 'full'
    || !$entity->hasField(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)) {
    return;
  }

  $records = $entity->get(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ALL_COMMUNITY_RECORDS)->referencedEntities();
  //$parent_record = $entity->get(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)->referencedEntities();
  if (!empty($records) && (count($records) > 1)) {
    $view_mode = 'community_records_full';
  }
}


/**
 * Implements hook_form_alter().
 */
function mukurtu_community_records_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only run on node forms.
  if (strpos($form_id, 'node_') === 0 && strpos($form_id, '_edit_form') > 0) {
    $args = $form_state->getBuildInfo()['args'];

    if (!empty($args) && isset($args[0]['mukurtu_community_records']['submit'])) {
      $form['mukurtu_community_records_target'] = [
        '#type' => 'hidden',
        '#value' => $args[0]['mukurtu_community_records']['target'],
      ];

      // Attach our custom submit handler that will run after the default handler.
      $form['actions']['submit']['#submit'][] = $args[0]['mukurtu_community_records']['submit'][0];
    }
  }
}

/**
 * Form submit callback for add community record.
 */
function mukurtu_community_records_add_community_record_form_submit(array &$form, FormStateInterface $form_state) {
  $nid = $form_state->getValue('mukurtu_community_records_target');

  if ($nid) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    if ($node && $node->access('update')) {
      $new_community_record_id = $form_state->getformObject()->getEntity()->id();
      $existing_community_records = mukurtu_core_flatten_entity_ref_field($node, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS);
      if (!in_array($new_community_record_id, $existing_community_records)) {
        $existing_community_records[] = $new_community_record_id;

        $node->set(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_COMMUNITY_RECORDS, $existing_community_records);
        $node->save();
      }
    }
  }
}
