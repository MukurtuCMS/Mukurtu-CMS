<?php

/**
 * @file
 * Provide Mukurtu Community Records.
 */

define("MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD", "field_mukurtu_original_record");

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;

/**
 * Implements hook_theme().
 */
function mukurtu_community_records_theme($existing, $type, $theme, $path) {
  return [
    'mukurtu_select_community_record_type' => [
      'template' => 'mukurtu-select-community-record-type',
      'variables' => ['node' => NULL, 'types' => NULL],
    ],
    'community_records' => [
      'template' => 'community-records',
      'variables' => [
        'active' => NULL,
        'records' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function mukurtu_community_records_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['node']
    ->setViewBuilderClass('Drupal\mukurtu_community_records\CommunityRecordNodeViewBuilder');
}


/**
 * Implements hook_node_view().
 *
 * This handles the media replication behavior for original record to
 * community records for viewing.
 */
function mukurtu_community_records_node_view(&$build, $node, $view_mode, $langcode) {
  $media_field = 'field_media_assets';
  if ($node->hasField('field_mukurtu_original_record') && $node->hasField($media_field)) {
    // Is the node a community record?
    $original_record = $node->get('field_mukurtu_original_record')->referencedEntities()[0] ?? NULL;
    if ($original_record && $original_record->hasField($media_field)) {
      // CR media field should be OR media + CR media.
      $orMedia = $original_record->get($media_field)->getValue();

      // Only re-render the field if the OR has media.
      if (!empty($orMedia)) {
        $crMedia = $node->get($media_field)->getValue();
        $node->set($media_field, array_merge($orMedia, $crMedia));

        // Determine the view mode for the field.
        $mode = ($view_mode instanceof LayoutBuilderEntityViewDisplay) ? $view_mode->getOriginalMode() : NULL;
        if (!$mode) {
          $mode = (is_string($view_mode)) ? $view_mode : NULL;
        }

        // Render the media field with the new values.
        if ($mode) {
          $build[$media_field] = $node->{$media_field}->view($mode);
        }
      }
    }
  }
}

/**
 * Return true if the entity has the given record field.
 */
function mukurtu_community_records_has_record_field(EntityInterface $entity, $field_name) {
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id == 'node' || $entity_type_id == 'media') {
    if (method_exists($entity, 'hasField')) {
      return $entity->hasField($field_name);
    }
  }

  return FALSE;
}

/**
 * Check if entity type/bundle supports CRs.
 */
function mukurtu_community_records_entity_type_supports_records($entity_type_id, $bundle) {
  $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $bundle);
  return isset($definitions[MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD]);
}


/**
 * Check if an entity is a community record.
 */
function mukurtu_community_records_is_community_record(EntityInterface $entity) {
  if (mukurtu_community_records_has_record_field($entity, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)) {
    $original = $entity->get(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)->getValue();
    if (!empty($original)) {
      return $original[0]['target_id'];
    }
  }

  return FALSE;
}

/**
 * Check if entity has community records.
 *
 * @param EntityInterface $entity
 * @return mixed
 */
function mukurtu_community_records_is_original_record(EntityInterface $entity) {
  if ($entity->getEntityTypeId() != 'node') {
    return FALSE;
  }

  $query = \Drupal::entityQuery('node')
    ->condition(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD, $entity->id())
    ->accessCheck(FALSE);
  $results = $query->execute();

  if (!empty($results)) {
    return $results;
  }

  return FALSE;
}

/**
 * Invalidate cache tags for all community records.
 */
function mukurtu_community_records_invalidate_record_tags(NodeInterface $node) {
  if (!$node->hasField('field_mukurtu_original_record')) {
    return;
  }

  $original_record = $node->get('field_mukurtu_original_record')->referencedEntities()[0] ?? $node;

  if (!$original_record) {
    return;
  }

  // Find all the community records.
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
    ->condition('field_mukurtu_original_record', $original_record->id())
    ->accessCheck(FALSE);
  $results = $query->execute();
   if (!empty($results)) {
    // Invalidate all the CR node cache tags.
    $tags = ['node_view'];
    foreach ($results as $nid) {
      $tags[] = "node:$nid";
    }

    Cache::invalidateTags($tags);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function mukurtu_community_records_node_insert(NodeInterface $node) {
  mukurtu_community_records_invalidate_record_tags($node);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function mukurtu_community_records_node_update(NodeInterface $node) {
  mukurtu_community_records_invalidate_record_tags($node);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function mukurtu_community_records_node_delete(NodeInterface $node) {
  mukurtu_community_records_invalidate_record_tags($node);
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function mukurtu_community_records_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (isset($fields[MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD])) {
    $fields[MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD]->addConstraint('ValidOriginalRecord', []);
  }
}

