<?php

/**
 * @file
 * Provide Mukurtu Community Records.
 */

define("MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD", "field_mukurtu_original_record");

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_theme().
 */
function mukurtu_community_records_theme($existing, $type, $theme, $path) {
  return [
    'mukurtu_select_community_record_type' => [
      'template' => 'mukurtu-select-community-record-type',
      'variables' => ['node' => NULL, 'types' => NULL],
    ],
    'community_records' => [
      'template' => 'community-records',
      'variables' => [
        'active' => NULL,
        'records' => NULL,
      ],
    ],
  ];
}

/**
 * Return true if the entity has the given record field.
 */
function mukurtu_community_records_has_record_field(EntityInterface $entity, $field_name) {
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id == 'node' || $entity_type_id == 'media') {
    if (method_exists($entity, 'hasField')) {
      return $entity->hasField($field_name);
    }
  }

  return FALSE;
}

/**
 * Check if entity type/bundle supports CRs.
 */
function mukurtu_community_records_entity_type_supports_records($entity_type_id, $bundle) {
  $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $bundle);
  return isset($definitions[MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD]);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function mukurtu_community_records_entity_insert(EntityInterface $entity) {
  mukurtu_community_records_invalidate_record_tags($entity);
}

/**
 * Check if an entity is a community record.
 */
function mukurtu_community_records_is_community_record(EntityInterface $entity) {
  if (mukurtu_community_records_has_record_field($entity, MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)) {
    $original = $entity->get(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD)->getValue();
    if (!empty($original)) {
      return $original[0]['target_id'];
    }
  }

  return FALSE;
}

/**
 * Check if entity has community records.
 *
 * @param EntityInterface $entity
 * @return mixed
 */
function mukurtu_community_records_is_original_record(EntityInterface $entity) {
  if ($entity->getEntityTypeId() != 'node') {
    return FALSE;
  }

  $query = \Drupal::entityQuery('node')
    ->condition(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD, $entity->id());
  $results = $query->execute();

  if (!empty($results)) {
    return $results;
  }

  return FALSE;
}

/**
 * Invalidate cache tags for all community records associated with entity.
 *
 * @param EntityInterface $entity
 * @return void
 */
function mukurtu_community_records_invalidate_record_tags(EntityInterface $entity) {
  if ($entity->getEntityTypeId() != 'node') {
    return;
  }

  $original_record_id = mukurtu_community_records_is_community_record($entity);

  if ($original_record_id === FALSE) {
    $original_record_id = $entity->id();
  }

  if ($original_record_id) {
    $query = \Drupal::entityQuery('node')
      ->condition(MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD, $original_record_id);
    $results = $query->execute();
    if (!empty($results)) {
      // Add the original record to the tags list.
      $tags = ["node:$original_record_id"];

      // Add all the records.
      foreach ($results as $vid => $nid) {
        $tags[] = "node:$nid";
      }
      Cache::invalidateTags($tags);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function mukurtu_community_records_entity_update(EntityInterface $entity) {
  mukurtu_community_records_invalidate_record_tags($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function mukurtu_community_records_entity_delete(EntityInterface $entity) {
  mukurtu_community_records_invalidate_record_tags($entity);
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function mukurtu_community_records_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (isset($fields[MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD])) {
    $fields[MUKURTU_COMMUNITY_RECORDS_FIELD_NAME_ORIGINAL_RECORD]->addConstraint('ValidOriginalRecord', []);
  }
}
