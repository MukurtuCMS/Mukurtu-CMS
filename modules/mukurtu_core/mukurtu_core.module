<?php

/**
 * @file
 * Provide Mukurtu Core.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\Entity\NodeType;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_theme().
 */
function mukurtu_core_theme($existing, $type, $theme, $path) {
  return [
    'mukurtu_node_add_list' => [
      'template' => 'mukurtu-node-add-list',
      'variables' => ['content' => NULL],
    ],
    'mukurtu_dashboard' => [
      'template' => 'mukurtu-dashboard',
      'variables' => [
        'getting_started_community' => NULL,
        'getting_started_category' => NULL,
        'activity_log' => NULL,
        'all_recent_content' => NULL,
        'user_recent_content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_build().
 */
function mukurtu_core_entity_type_build(array &$entity_types) {
  // Prefix media URLs with 'dashboard'.
  $entity_types['media']->setLinkTemplate('add-page', '/dashboard/media/add');
  $entity_types['media']->setLinkTemplate('add-form', '/dashboard/media/add/{media_type}');
  $entity_types['media']->setLinkTemplate('canonical', '/dashboard/media/{media}/edit');
  $entity_types['media']->setLinkTemplate('delete-form', '/dashboard/media/{media}/delete');
  $entity_types['media']->setLinkTemplate('delete-multiple-form', '/dashboard/media/delete');
  $entity_types['media']->setLinkTemplate('edit-form', '/dashboard/media/{media}/edit');
  $entity_types['media']->setLinkTemplate('revision', '/dashboard/media/{media}/revisions/{media_revision}/view');
  //$entity_types['media']->setLinkTemplate('collection', '/dashboard/admin/content/media');
}

/**
 * Implements hook_page_attachments.
 */
function mukurtu_core_page_attachments(array &$attachments) {
  if (\Drupal::currentUser()->id() == 1) {
    \Drupal::messenger()->addError(t('You are logged in as the super admin (UID 1), which gives you the ability to take actions that can break the site and corrupt your data. Consider logging into a different account.'));
  }
}

/**
 * Implements hook_form_alter().
 */
function mukurtu_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Include our leaflet widget library fixes on node edit forms.
  if (str_starts_with($form_id, 'node_') && str_ends_with($form_id, '_form')) {
    $form['#attached']['library'][] = 'mukurtu_core/mukurtu-leaflet-widget';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mukurtu_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'mukurtu_core_user_login_form_submit';
}

/**
 * Custom submit handler to redirect to dashboard on login.
 */
function mukurtu_core_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('mukurtu_core.dashboard');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mukurtu_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  $views = ['mukurtu_manage_all_media', 'mukurtu_manage_all_content'];

  if (in_array($view['view']->id(), $views)) {
    // Replace the default textfield with an entity autocomplete.
    $form['field_mukurtu_community_target_id'] = [
      '#type' => 'entity_autocomplete',
      '#target_type' => 'node',
      '#default_value' => 0,
      '#process_default_value' => FALSE,
      '#required' => FALSE,
      '#selection_handler' => 'default',
      '#selection_settings' => [
        'target_bundles' => ['community'],
      ],
    ];

    // Use our custom submit handler.
    array_unshift($form['#submit'], 'mukurtu_core_mukurtu_manage_all_content_autocomplete_submit');
  }
}

/**
 * Custom submit handler for field_mukurtu_community_target_id.
 */
function mukurtu_core_mukurtu_manage_all_content_autocomplete_submit($form, &$form_state) {
  // Hot replacing the textfield with auto complete messes up default
  // value handling. Replace it here so when there's no input
  // the view still displays results as expected.
  if (!$form_state->getValue('field_mukurtu_community_target_id')) {
    $form_state->setValue('field_mukurtu_community_target_id', 0);
  }
}

/**
 * Prepares variables for list of available node type templates.
 *
 * Default template: mukurtu-node-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of content types.
 */
function template_preprocess_mukurtu_node_add_list(array &$variables) {
  $variables['types'] = [];

  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => Link::fromTextAndUrl($type->label(), Url::fromRoute('mukurtu_core.add', ['node_type' => $type->id()]))->toString(),
        'description' => [
          '#markup' => $type->getDescription(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_entity_bundle_create().
 */
function mukurtu_core_entity_bundle_create($entity_type_id, $bundle) {
  // For any new node that is defined, add the content type field.
  if ($entity_type_id == 'node') {
    mukurtu_core_create_content_type_field($entity_type_id, $bundle);
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function mukurtu_core_entity_extra_field_info() {
  $extra = [];

  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->id()]['display']['field_title'] = [
      'label' => t('Title'),
      'description' => t('Title'),
      'weight' => 0,
      'visible' => TRUE,
    ];
  }
  return $extra;
}

/**
 * Implements hook_entity_base_field_info().
 */
function mukurtu_core_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'node') {
    // Define a computed field for representative media, a single media entity that
    // represents the specific content.

    $fields['field_representative_media'] = BaseFieldDefinition::create('entity_reference')
      ->setName('field_representative_media')
      ->setLabel(t('Representative Media'))
      ->setDescription(t('A single media item that represents the specific content.'))
      ->setComputed(TRUE)
      ->setClass('Drupal\mukurtu_core\Plugin\Field\RepresentativeMediaItemList')
      ->setSetting('target_type', 'media')
      ->setCardinality(1)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', ['label' => 'hidden']);

    // Computed field for related content display.
    // @see \Drupal\mukurtu_core\Plugin\Field\AllRelatedContentItemList.
    $fields['field_all_related_content'] = BaseFieldDefinition::create('entity_reference')
      ->setName('field_all_related_content')
      ->setLabel(t('Related Content'))
      ->setDescription(t('Display field for related content.'))
      ->setComputed(TRUE)
      ->setClass('Drupal\mukurtu_core\Plugin\Field\AllRelatedContentItemList')
      ->setSetting('target_type', 'node')
      ->setCardinality(-1)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', ['label' => 'hidden']);
  }

  return $fields;
}

/**
 * Implements hook_entity_type_alter().
 */
function mukurtu_core_entity_type_alter(array &$entity_types) {
  $entity_types['user']->setListBuilderClass('Drupal\mukurtu_core\MukurtuUserListBuilder');
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function mukurtu_core_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('field_title')) {
    $build['field_title'] = $entity->title->view();
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function mukurtu_core_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Build an "approve" link to block/unblock users.
  if ($view_mode == 'full') {
    $status = $entity->status->value;
    $title = $status ? t('Block User') : t('Approve User');
    $route = $status ? 'mukurtu_core.block_user' : 'mukurtu_core.approve_user';
    $build['mukurtu_toggle_user_approval'] = [
      '#theme' => 'links',
      '#weight' => -2,
      '#links' => [
        'mukurtu-toggle-user-approval' => [
          'title' => $title,
          'url' => Url::fromRoute($route, ['uid' => $entity->id()]),
          'attributes' => [
            'class' => ['use-ajax'],
          ],
        ],
      ],
      '#attached' => ['library' => ['core/drupal.ajax']],
    ];
  }
}

/**
 * Implements hook_entity_presave().
 */
function mukurtu_core_entity_presave(EntityInterface $entity) {
  // Update content type field.
  if ($entity->getEntityTypeId() == 'node') {
    if ($entity->hasField('field_content_type')) {
      $entity->set('field_content_type', $entity->type->entity->label());
    }
  }
}

/**
 * Create the content type field.
 */
function mukurtu_core_create_content_type_field($entity_type, $bundle) {
  $entityFieldManager = \Drupal::service('entity_field.manager');
  $fields = $entityFieldManager->getFieldDefinitions($entity_type, $bundle);

  // @todo What are we doing about this field?
  if (FALSE && !isset($fields['field_content_type'])) {
    FieldConfig::create([
      'field_name' => 'field_content_type',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => 'Content Type',
    ])->save();
  }
}

/**
 * Run $fn on the target entities, using the batch system if necessary.
 *
 * $target_entity_ids = ['node' => [1, 2, 3], 'media' => [4, 5]];
 */
function mukurtu_core_entity_batch_operation($fn, $target_entity_ids, $args = []) {
  // Count the number of entities we are processing.
  $count_entities = function ($carry, $item) {
    $carry += count($item);
    return $carry;
  };
  $item_count = array_reduce($target_entity_ids, $count_entities);

  if ($item_count == 0) {
    return;
  }

  // For fewer than 10 items, proceed without batch processing.
  if ($item_count < 10) {
    foreach ($target_entity_ids as $entity_type_id => $ids) {
      // Load the entities.
      $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
      $entities = $entity_storage->loadMultiple($ids);

      // Apply the function to each.
      foreach ($entities as $batch_entity) {
        $fn($batch_entity, $args);
      }
    }
  } else {
    // More than 10 items and we run it in batch.
    $batch_title = $args['title'] ?? t('Updating content');
    $batch = [
      'title' => $batch_title,
      'operations' => [
        [
          'mukurtu_core_entity_run_batch_operation',
          [
            [
              'entities' => $target_entity_ids,
              'fn' => $fn,
              'args' => $args,
            ],
          ],
        ],
      ],
      'file' => drupal_get_path('module', 'mukurtu_core') . '/mukurtu_core.entity_batch_operation.inc',
    ];

    batch_set($batch);
  }
}

/**
 * Flatten an entity reference field to an array of ids.
 */
function mukurtu_core_flatten_entity_ref_field($entity, $fieldname) {
  if (!$entity->hasField($fieldname)) {
    return [];
  }

  $refs = $entity->get($fieldname)->getValue();

  $flatten = function ($e) {
    return isset($e['target_id']) ? $e['target_id'] : NULL;
  };

  return array_map($flatten, $refs);
}

/**
 * Batch callback to remove an ID from an entity reference field.
 */
function mukurtu_core_batch_remove_entity_reference($entity, $args) {
  $fieldname = $args['fieldname'];
  $id_to_remove = $args['target_id'];
  if ($entity->hasField($fieldname)) {
    $current_ids = mukurtu_core_flatten_entity_ref_field($entity, $fieldname);
    if (in_array($id_to_remove, $current_ids)) {
      $entity->set($fieldname, array_diff($current_ids, [$id_to_remove]));
      $entity->save();
      return TRUE;
    }
  }
  return FALSE;
};

/**
 * Batch callback to add an ID to an entity reference field.
 */
function mukurtu_core_batch_add_entity_reference($entity, $args) {
  $fieldname = $args['fieldname'];
  $id_to_add = $args['target_id'];
  if ($entity->hasField($fieldname)) {
    $cardinality = $entity->{$fieldname}->getFieldDefinition()->getFieldStorageDefinition()->getCardinality();
    $current_ids = mukurtu_core_flatten_entity_ref_field($entity, $fieldname);
    if (!in_array($id_to_add, $current_ids)) {
      // No room to add the ref, fail.
      if ($cardinality > 0 && count($current_ids) + 1 > $cardinality) {
        return FALSE;
      }
      // Add the ref and save the entity.
      $current_ids[] = $id_to_add;
      $entity->set($fieldname, $current_ids);
      $entity->save();
      return TRUE;
    }
  }
  return FALSE;
};


/**
 * Helper function to invalidate all contained references in an ERF.
 */
function mukurtu_core_invalidate_entity_reference_field_references(EntityInterface $entity, $field) {
  $refs = $entity->get($field)->referencedEntities() ?? NULL;
  if (!empty($refs)) {
    foreach ($refs as $ref) {
      Cache::invalidateTags($ref->getCacheTagsToInvalidate());
    }
  }
}
