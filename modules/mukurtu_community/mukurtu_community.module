<?php

/**
 * @file
 * Provide Mukurtu Communities.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\og\Og;
use Drupal\og\OgMembershipInterface;
use Drupal\user\EntityOwnerInterface;
use Drupal\og\Entity\OgMembership;

define("MUKURTU_COMMUNITY_FIELD_NAME_COMMUNITY", "field_mukurtu_community");

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function mukurtu_community_entity_insert(EntityInterface $entity) {
  $type = $entity->bundle();

  if ($entity->getEntityTypeId() == 'og_membership') {
    // Automatically add owner as community manager.
    if ($entity->isOwner() && $entity->getGroupEntityType() == 'node' && $entity->getGroupBundle() == 'community') {
      // Find the community manager role.
      $roleManager = \Drupal::service('og.role_manager');
      $roles = $roleManager->getRolesByBundle($entity->getGroupEntityType(), $entity->getGroupBundle());

      // If we have it, add it.
      if (isset($roles['node-community-manager'])) {
        $entity->addRole($roles['node-community-manager']);
        $entity->save();
      }
    }
  }

  if ($type == 'community') {
    // Placeholder, replace after import implemented.
    $suppress_protocol_creation = $entity->fromImport ?? FALSE;

    // There are some cases where we don't want to auto generate the protocol (e.g., import).
    if ($type == "community" && !$suppress_protocol_creation) {
      //$protocol_manager = \Drupal::service('mukurtu_protocol.protocol_manager');
      //$protocol_manager->createProtocol($entity, 'community');
    }
  }
}

