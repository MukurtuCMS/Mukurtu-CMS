<?php

/**
 * @file
 * Provide Mukurtu Taxonomies.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function mukurtu_taxonomy_theme($existing, $type, $theme, $path) {
  return [
    'mukurtu_vocabulary_add_list' => [
      'template' => 'mukurtu-vocabulary-add-list',
      'variables' => ['content' => NULL],
    ],
    'taxonomy_records' => [
      'template' => 'taxonomy-records',
      'variables' => [
        'active' => NULL,
        'records' => NULL,
        'referenced_content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_access().
 */
function mukurtu_taxonomy_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() === 'taxonomy_vocabulary') {
    $vocabs = [
      'authors',
      'category',
      'community_type',
      'contributor',
      'creator',
      'format',
      'interpersonal_relationship',
      'keywords',
      'language',
      'people',
      'publisher',
      'subject',
      'tags',
      'type',
      'word_type',
    ];
    if ($operation === 'delete' && in_array($entity->id(), $vocabs)) {
      // Don't allow the any of our Mukurtu taxonomy vocabs to be deleted.
      return AccessResult::forbidden();
    }
  }
}

/**
 * Prepares variables for list of available vocabulary templates.
 *
 * Default template: mukurtu-vocabulary-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of content types.
 */
function template_preprocess_mukurtu_vocabulary_add_list(array &$variables) {
  $variables['types'] = [];

  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => Link::fromTextAndUrl($type->label(), Url::fromRoute('mukurtu_taxonomy.manage_taxonomy_vocabulary', ['taxonomy_vocabulary' => $type->id()]))->toString(),
        'description' => [
          '#markup' => $type->getDescription(),
        ],
      ];
    }
  }
}


/**
 * Implements hook_views_pre_view().
 */
function mukurtu_taxonomy_views_pre_view(ViewExecutable $view) {
  // This drives the handling of the taxonomy term page view.
  // It injects the UUID of the term into the fulltext SAPI search.
  if ($view->id() == 'mukurtu_taxonomy_references') {
    if ($term_uuid = $view->args[0] ?? NULL) {
      $filters = $view->display_handler->getOption('filters');

      // Get the user's search terms.
      $user_search = $filters['search_api_fulltext']['value'];

      // Blank out the actual filter because we'll add it to the view arg.
      $filters['search_api_fulltext']['value'] = '';
      $view->display_handler->overrideOption('filters', $filters);

      // Search for the term and whatever the user searched for.
      $view->args[0] = "$term_uuid $user_search";
    }
  }
}
