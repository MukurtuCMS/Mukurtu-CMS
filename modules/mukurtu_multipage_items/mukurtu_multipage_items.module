<?php

/**
 * @file
 * Provides a multipage item entity type.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;
use Drupal\path_alias\PathAliasInterface;

/**
 * Implements hook_theme().
 */
function mukurtu_multipage_items_theme() {
  return [
    'multipage_item' => [
      'render element' => 'elements',
    ],
    'multipage_item_book_view' => [
      'variables' => [
        'table_of_contents' => NULL,
        'pages' => [],
        'page_nav_attributes' => NULL,
        'current_page' => NULL,
        'current_page_attributes' => NULL,
/*         'next_page' => NULL,
        'previous_page' => NULL, */
      ],
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 */
function mukurtu_multipage_items_entity_insert(EntityInterface $entity) {
  // The first time we add a /node/ID alias, add the multipage alias as well.
  if ($entity instanceof PathAliasInterface) {
    preg_match('/\/node\/(\d+)$/', $entity->getPath(), $matches, PREG_UNMATCHED_AS_NULL);
    $nid = $matches[1] ?? NULL;
    if ($nid) {
      $values = ['path' => "/node/{$nid}/multipage", 'alias' => "{$entity->getAlias()}/multipage"];
      $alias = \Drupal::entityTypeManager()->getStorage('path_alias')->create($values);
      $alias->save();
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function mukurtu_multipage_items_entity_update(EntityInterface $entity) {
  // Update any existing MPI path alias for a node (the title could have changed).
  if ($entity instanceof NodeInterface) {
    $pam = \Drupal::service('path_alias.manager');
    $query = \Drupal::entityTypeManager()->getStorage('path_alias')->getQuery();
    $result = $query->condition('path', "/node/{$entity->id()}/multipage")
      ->accessCheck(FALSE)
      ->execute();

    if (count($result) == 1) {
      // Get the alias to the canonical route.
      $nodeAlias = $pam->getAliasByPath("/node/{$entity->id()}");

      // Build the updated multipage alias.
      /** @var \Drupal\path_alias\Entity\PathAlias $alias */
      $alias = \Drupal::entityTypeManager()->getStorage('path_alias')->load(reset($result));
      $alias->setAlias("{$nodeAlias}/multipage");
      $alias->save();
    }

    // Create an alias on the off chance it doesn't exist.
    if (empty($result)) {
      $nodeAlias = $pam->getAliasByPath("/node/{$entity->id()}");
      $values = ['path' => "/node/{$entity->id()}/multipage", 'alias' => "{$nodeAlias}/multipage"];
      $alias = \Drupal::entityTypeManager()->getStorage('path_alias')->create($values);
      $alias->save();
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function mukurtu_multipage_items_entity_delete(EntityInterface $entity) {
  // Delete any multipage path aliases for the deleted node.
  // Deletion is the only time we remove the multipage alias (even if the
  // multipage entity is deleted). We want to maintain durable links and the
  // view controller will failover to the canonical node path if the multipage
  // entity doesn't exist.
  if ($entity instanceof NodeInterface) {
    $query = \Drupal::entityTypeManager()->getStorage('path_alias')->getQuery();
    $result = $query->condition('path', "/node/{$entity->id()}/multipage")
      ->accessCheck(FALSE)
      ->execute();
    if (!empty($result)) {
      $aliases = \Drupal::entityTypeManager()->getStorage('path_alias')->loadMultiple($result);
      foreach ($aliases as $alias) {
        $alias->delete();
      }
    }
  }
}

/**
 * Prepares variables for multipage item templates.
 *
 * Default template: multipage-item.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the multipage item information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_multipage_item(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
