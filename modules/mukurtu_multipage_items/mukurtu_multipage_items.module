<?php

/**
 * @file
 * Provides a multipage item entity type.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\mukurtu_multipage_items\MultipageItemInterface;
use Drupal\node\NodeInterface;
use Drupal\path_alias\PathAliasInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_theme().
 */
function mukurtu_multipage_items_theme() {
  return [
    'multipage_item' => [
      'render element' => 'elements',
    ],
    'mukurtu_multipage_items_add_page_list' => [
      'template' => 'mukurtu-multipage-items-add-page-list',
      'variables' => ['content' => NULL],
    ],
    'multipage_item_book_view' => [
      'variables' => [
        'table_of_contents' => NULL,
        'pages' => [],
        'page_nav_attributes' => NULL,
        'current_page' => NULL,
        'current_page_attributes' => NULL,
/*         'next_page' => NULL,
        'previous_page' => NULL, */
      ],
    ],
  ];
}

/**
 * Prepares variables for list of available node type templates.
 *
 * Default template: mukurtu-multipage-items-add-page-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of content types.
 */
function template_preprocess_mukurtu_multipage_items_add_page_list(array &$variables) {
  $variables['types'] = [];

  if (!empty($variables['content'])) {
    $enabledBundles = \Drupal::config('mukurtu_multipage_items.settings')->get('bundles_config');
    $page_node = \Drupal::routeMatch()->getParameter('node');
    foreach ($variables['content'] as $type) {
      // Skip bundles not enabled for multipage.
      if (!isset($enabledBundles[$type->id()]) || !$enabledBundles[$type->id()]) {
        continue;
      }

      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => Link::fromTextAndUrl($type->label(), Url::fromRoute('mukurtu_multipage_items.add', ['page_node' => $page_node->id(), 'node_type' => $type->id()]))->toString(),
        'description' => [
          '#markup' => $type->getDescription(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function mukurtu_multipage_items_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'mukurtu_multipage_items.add') {
    if ($page_node = \Drupal::routeMatch()->getParameter('page_node')) {
      $mpiManager = \Drupal::service('mukurtu_multipage_items.multipage_item_manager');
      if ($mpi = $mpiManager->getMultipageEntity($page_node)) {
        // Store which MPI we're trying to add the page to.
        $form_state->set('multipage_item_target', $mpi->id());

        // Attach our custom sumbmit handler after save.
        // @see mukurtu_multipage_items_add_new_page_callback.
        $oldHandlers = $form["actions"]["submit"]["#submit"];
        $newHandlers = [];
        foreach ($oldHandlers as $handler) {
          $newHandlers[] = $handler;
          if ($handler == '::save') {
            $newHandlers[] = 'mukurtu_multipage_items_add_new_page_callback';
          }
        }
        $form["actions"]["submit"]["#submit"] = $newHandlers;
      }
    }
  }
}

/**
 * Submit handler to add a newly created page to a MPI entity.
 *
 * @see mukurtu_multipage_items_form_alter.
 */
function mukurtu_multipage_items_add_new_page_callback(array &$form, FormStateInterface $form_state) {
  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    $newPageEntity = $form_state->getformObject()->getEntity();
    if ($mpiId = $form_state->get('multipage_item_target')) {
      if ($mpi = \Drupal::entityTypeManager()->getStorage('multipage_item')->load($mpiId)) {
        /** @var \Drupal\mukurtu_multipage_items\MultipageItemInterface $mpi */
        $mpi->addPage($newPageEntity);
        $mpi->save();
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function mukurtu_multipage_items_entity_insert(EntityInterface $entity) {
  // New MPI, add all the page aliases.
  if ($entity instanceof MultipageItemInterface) {
    $page_ids = array_column($entity->get('field_pages')->getValue(), 'target_id') ?? [];
    foreach ($page_ids as $id) {
      mukurtu_multipage_items_update_node_page_alias($id);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function mukurtu_multipage_items_entity_update(EntityInterface $entity) {
  // If a node updates its path alias, update the multipage alias as well.
  if ($entity instanceof PathAliasInterface) {
    preg_match('/\/node\/(\d+)$/', $entity->getPath(), $matches, PREG_UNMATCHED_AS_NULL);
    $nid = $matches[1] ?? NULL;
    if ($nid) {
      mukurtu_multipage_items_update_node_page_alias($nid, FALSE);
    }
  }

  // Updated MPI, update the page aliases.
  if ($entity instanceof MultipageItemInterface) {
    $page_ids = array_column($entity->get('field_pages')->getValue(), 'target_id') ?? [];
    foreach($page_ids as $id) {
      mukurtu_multipage_items_update_node_page_alias($id);
    }
  }
}

/**
 * Create a multipage path alias for a node.
 *
 * @param int $nid
 *   The node id.
 * @param bool $create
 *   If TRUE, create the alias if one does not exist.
 *
 * @return void
 */
function mukurtu_multipage_items_update_node_page_alias($nid, $create = TRUE) {
  $pam = \Drupal::service('path_alias.manager');
  $nodeAlias = $pam->getAliasByPath("/node/{$nid}");
  // Check if there's an existing alias for the node's canonical path.
  // We're basing the multipage alias off of that.
  if ($nodeAlias && $nodeAlias != "/node/{$nid}") {
    // Check for an existing multipage alias.
    $query = \Drupal::entityTypeManager()->getStorage('path_alias')->getQuery();
    $result = $query->condition('path', "/node/{$nid}/multipage")
      ->accessCheck(FALSE)
      ->execute();

    // Node has an existing multipage alias, update it.
    if (count($result) == 1) {
      /** @var \Drupal\path_alias\PathAliasInterface $alias */
      $alias = \Drupal::entityTypeManager()->getStorage('path_alias')->load(reset($result));
      $alias->setAlias("{$nodeAlias}/multipage");
      $alias->save();
      return;
    }

    // Node does not have an existing multipage alias, create one.
    if ($create) {
      $values = ['path' => "/node/{$nid}/multipage", 'alias' => "{$nodeAlias}/multipage"];
      $alias = \Drupal::entityTypeManager()->getStorage('path_alias')->create($values);
      $alias->save();
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function mukurtu_multipage_items_entity_delete(EntityInterface $entity) {
  // Delete any multipage path aliases for the deleted node.
  // Deletion is the only time we remove the multipage alias (even if the
  // multipage entity is deleted). We want to maintain durable links and the
  // view controller will failover to the canonical node path if the multipage
  // entity doesn't exist.
  if ($entity instanceof NodeInterface) {
    $query = \Drupal::entityTypeManager()->getStorage('path_alias')->getQuery();
    $result = $query->condition('path', "/node/{$entity->id()}/multipage")
      ->accessCheck(FALSE)
      ->execute();
    if (!empty($result)) {
      $aliases = \Drupal::entityTypeManager()->getStorage('path_alias')->loadMultiple($result);
      foreach ($aliases as $alias) {
        $alias->delete();
      }
    }
  }
}

/**
 * Prepares variables for multipage item templates.
 *
 * Default template: multipage-item.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the multipage item information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_multipage_item(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function mukurtu_multipage_items_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'multipage_item_browser') {
    // Only include nodes whose content type is enabled in the MPI bundles config.
    $bundles_config = \Drupal::config('mukurtu_multipage_items.settings')->get('bundles_config');
    $enabledBundles = array_keys(array_filter($bundles_config));

    $query->addWhere('enabledBundles', 'type', $enabledBundles, 'IN');

    // Exclude nodes that are already pages in an MPI.
    $table_mapping = \Drupal::entityTypeManager()->getStorage('multipage_item')->getTableMapping();
    $field_table = $table_mapping->getFieldTableName('field_pages');
    $field_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('multipage_item')['field_pages'];
    $field_column = $table_mapping->getFieldColumnName($field_storage_definitions, 'target_id');

    $connection = \Drupal::database();
    $result = $connection->select($field_table, 'f')
      ->fields('f', array($field_column))
      ->distinct(TRUE)
      ->execute()->fetchCol();

    // Only query when there are existing pages, or else it will crash.
    if ($result) {
      $query->addWhere('notPages', 'nid', $result, 'NOT IN');
    }
  }
}
