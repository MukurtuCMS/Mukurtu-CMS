<?php

/**
 * @file
 * Provide Mukurtu Collection Type.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\mukurtu_collection\Entity\Collection;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

define("MUKURTU_COLLECTION_FIELD_NAME_ITEMS", "field_items_in_collection");


/**
 * Implements hook_theme().
 */
function mukurtu_collection_theme($existing, $type, $theme, $path) {
  return [
    'mukurtu_collection_browse' => [
      'variables' => [
        'results' => NULL,
        'facets' => [],
      ],
    ],
    'mukurtu_my_personal_collections' => [
      'variables' => [
        'results' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_system_breadcrumb_alter().
 *
 */
function mukurtu_collection_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  // Build the subcollection breadcrumbs.
  if ($route_match->getRouteName() === 'entity.node.canonical') {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $route_match->getParameter('node');
    if ($node instanceof Collection) {
      $branch = [];
      while ($parent = $node->getParentCollection()) {
        $branch[] = $parent;
        $node = $parent;
      }
      $branch = array_reverse($branch);

      // Need less aggressive caching so the breadcrumbs are built for each
      // specific collection.
      $breadcrumb->addCacheTags(['collection_list']);
      $breadcrumb->addCacheContexts(['url']);

      // Add the collections landing page.
      $breadcrumb->addLink(\Drupal\Core\Link::createFromRoute(t('Collections'), 'mukurtu_collection.collection_browse_page'));

      // Add each parent collection in order.
      foreach ($branch as $subcollection) {
        $breadcrumb->addLink(\Drupal\Core\Link::createFromRoute($subcollection->getTitle(), 'entity.node.canonical', ['node' => $subcollection->id()]));
      }
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function mukurtu_collection_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  if ($entity_type->id() == 'node') {
    $fields = [];
    $fields['field_in_collection'] = BaseFieldDefinition::create('entity_reference')
      ->setName('field_in_collection')
      ->setLabel(t('Collections'))
      ->setDescription(t('Collections this content is contained in.'))
      ->setComputed(TRUE)
      ->setClass('Drupal\mukurtu_collection\Plugin\Field\MukurtuInCollectionFieldItemsList')
      ->setTargetEntityTypeId('node')
      ->setTargetBundle('collection')
      ->setRevisionable(FALSE)
      ->setTranslatable(FALSE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setDisplayConfigurable('view', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_entity_insert().
 */
function mukurtu_collection_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'collection') {
    mukurtu_core_invalidate_entity_reference_field_references($entity, MUKURTU_COLLECTION_FIELD_NAME_ITEMS);
  }
}

/**
 * Implements hook_entity_update().
 */
function mukurtu_collection_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'collection') {
    mukurtu_core_invalidate_entity_reference_field_references($entity, MUKURTU_COLLECTION_FIELD_NAME_ITEMS);
  }
}

/**
 * Implements hook_entity_delete().
 */
function mukurtu_collection_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'node') {
    return;
  }

  if ($entity->bundle() == 'collection') {
    mukurtu_core_invalidate_entity_reference_field_references($entity, MUKURTU_COLLECTION_FIELD_NAME_ITEMS);
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function mukurtu_collection_entity_bundle_info_alter(array &$bundles): void {
  // Collection bundle class.
  if (isset($bundles['node']['collection'])) {
    $bundles['node']['collection']['class'] = Collection::class;
  }
}

/**
 * Implements hook_entity_field_storage_info().
 */
function mukurtu_collection_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
    return Collection::bundleFieldDefinitions($entity_type, 'collection', []);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function mukurtu_collection_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Constraint for items in collection.
  if (isset($fields[MUKURTU_COLLECTION_FIELD_NAME_ITEMS])) {
    $fields[MUKURTU_COLLECTION_FIELD_NAME_ITEMS]->addConstraint('ValidCollectionItem', []);
  }

  // Child collection constraints.
  if ($bundle == 'collection' && isset($fields['field_child_collections'])) {
    $fields['field_child_collections']->addConstraint('ValidChildCollection', []);
  }
}

/**
 * Implements hook_slick_settings_alter().
 */
function mukurtu_collection_slick_settings_alter(array &$build, $items) {
  $id = \Drupal::routeMatch()->getRawParameter('node');

  $options = &$build['optionset'];

  $page = 0;

  // Select the current node in the slick slider.
  if ($id) {
    $refs = $items->referencedEntities();
    foreach ($refs as $ref) {
      if ($id == $ref->id()) {
        $options->setSetting('initialSlide', $page);
        continue;
      }
      $page++;
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function mukurtu_collection_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide revision log on personal collection edit and add forms.
  if ($form_id == 'personal_collection_edit_form' || $form_id == 'personal_collection_add_form') {
    $form['revision_log']['#access'] = FALSE;
  }

  // Only run on node forms.
  if (strpos($form_id, 'node_') === 0 && strpos($form_id, '_edit_form') > 0) {
    $args = $form_state->getBuildInfo()['args'];

    // Are there any mukurtu_collection specific arguments to handle?
    if (!empty($args) && isset($args[0]['mukurtu_collection']['submit'])) {
      // We want to add this node to the target collection after the node form is submitted.
      // Add the collection ID to the form.
      $form['mukurtu_collection_target'] = [
        '#type' => 'hidden',
        '#value' => $args[0]['mukurtu_collection']['target'],
      ];

      // Attach our custom submit handler that will run after the default handler.
      $form['actions']['submit']['#submit'][] = $args[0]['mukurtu_collection']['submit'][0];
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function mukurtu_collection_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Allow viewing of collections. Protocol access checks down the line will
  // catch any forbidden access.
  if ($operation == 'view') {
    return AccessResult::allowed();
  }
}
