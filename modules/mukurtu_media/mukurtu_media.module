<?php

use Drupal\mukurtu_media\Entity\Document;
use Drupal\mukurtu_media\Entity\Audio;
use Drupal\mukurtu_media\Entity\Image;
use Drupal\mukurtu_media\Entity\RemoteVideo;
use Drupal\mukurtu_media\Entity\Video;
use Drupal\mukurtu_media\Entity\SoundcloudMedia;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\Request;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Render\Element;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function mukurtu_media_entity_bundle_info_alter(array &$bundles): void
{
  if (isset($bundles['media']['document'])) {
    $bundles['media']['document']['class'] = Document::class;
  }
  if (isset($bundles['media']['audio'])) {
    $bundles['media']['audio']['class'] = Audio::class;
  }
  if (isset($bundles['media']['image'])) {
    $bundles['media']['image']['class'] = Image::class;
  }
  if (isset($bundles['media']['remote_video'])) {
    $bundles['media']['remote_video']['class'] = RemoteVideo::class;
  }
  if (isset($bundles['media']['video'])) {
    $bundles['media']['video']['class'] = Video::class;
  }
  if (isset($bundles['media']['soundcloud'])) {
    $bundles['media']['soundcloud']['class'] = SoundcloudMedia::class;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mukurtu_media_form_media_document_add_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // For new document forms, don't show the "Extracted Text" field because
  // no text has been extracted yet.
  if (isset($form['field_extracted_text'])) {
    $form['field_extracted_text']['#disabled'] = TRUE;
    $form['field_extracted_text']['#type'] = 'hidden';
  }

  // Add a process callback for the document file field. This handler will attach our AJAX callback.
  // We need to do this via a process callback because ManagedFile builds its AJAX callbacks
  // inside of its own process callbacks.
  $form['field_media_document']['widget'][0]['#process'][] = 'mukurtu_media_refresh_thumb_process';

  // Prepend a process callback for the thumbnail field to add our default thumbnail logic.
  array_unshift($form["field_thumbnail"]["widget"][0]["#process"], 'mukurtu_media_process_thumb');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mukurtu_media_form_media_document_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // For existing document forms, make the "Extracted Text" field read only.
  if (isset($form['field_extracted_text'])) {
    $form['field_extracted_text']['#disabled'] = TRUE;
  }
}

function mukurtu_media_form_media_video_add_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // Add a process callback for the video file field. This handler will attach our AJAX callback.
  // We need to do this via a process callback because ManagedFile builds its AJAX callbacks
  // inside of its own process callbacks.
  $form['field_media_video_file']['widget'][0]['#process'][] = 'mukurtu_media_refresh_thumb_process';

  // Prepend a process callback for the thumbnail field to add our default thumbnail logic.
  array_unshift($form["field_thumbnail"]["widget"][0]["#process"], 'mukurtu_media_process_thumb');
}

/**
 * AJAX callback for video upload with our custom thumbnail field refresh.
 *
 * Note: This is almost a 100% duplication of ManagedFile::uploadAjaxCallback.
 * If it changes, we'll need to change this. Maybe there's a way to merge our
 * thumbnail ReplaceCommand with the output of uploadAjaxCallback, but I
 * couldn't see one the first time around.
 */
function mukurtu_media_upload_ajax_callback(array &$form, FormStateInterface $form_state, Request $request) {
  /** @var \Drupal\Core\Render\RendererInterface $renderer */
  $renderer = \Drupal::service('renderer');
  $response = new AjaxResponse();

  // Mukurtu specific: Rebuild the thumbnail field to reflect any thumbnails we might have generated.
  // @todo Replace static #ajax-wrapper--2 with whatever form element actually contains it.
  $response->addCommand(new ReplaceCommand("#ajax-wrapper--2 > div", $form['field_thumbnail']['widget']));

  $form_parents = explode('/', $request->query->get('element_parents'));

  // Sanitize form parents before using them.
  $form_parents = array_filter($form_parents, [Element::class, 'child']);

  // Retrieve the element to be rendered.
  $form = NestedArray::getValue($form, $form_parents);

  // Add the special AJAX class if a new file was added.
  $current_file_count = $form_state->get('file_upload_delta_initial');
  if (isset($form['#file_upload_delta']) && $current_file_count < $form['#file_upload_delta']) {
    $form[$current_file_count]['#attributes']['class'][] = 'ajax-new-content';
  }

  $status_messages = ['#type' => 'status_messages'];
  $form['#prefix'] .= $renderer->renderRoot($status_messages);
  $output = $renderer->renderRoot($form);
  $response->setAttachments($form['#attached']);
  $response->addCommand(new ReplaceCommand(NULL, $output));
  return $response;
}

/**
 * Process callback for the video file upload to attach our AJAX callback.
 */
function mukurtu_media_refresh_thumb_process(&$element, FormStateInterface $form_state, &$complete_form) {
  $element['upload_button']['#ajax']['callback'] = 'mukurtu_media_upload_ajax_callback';
  return $element;
}

/**
 * Process callback for the thumbnail field to generate a thumbnail from the
 * media file.
 */
function mukurtu_media_process_thumb(&$element, FormStateInterface $form_state, &$complete_form)
{
  $entity = $form_state->getformObject()->getEntity();
  if (method_exists($entity, 'generateThumbnail')) {
    $fid = $entity->generateThumbnail($element, $form_state, $complete_form);
    if ($fid != NULL) {
      $element['#value']['fids'] = [$fid];
    }
  }
  return $element;
}
