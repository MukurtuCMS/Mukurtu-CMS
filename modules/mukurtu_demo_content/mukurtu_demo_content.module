<?php

use Drupal\mukurtu_protocol\Entity\Community;
use Drupal\mukurtu_protocol\Entity\Protocol;
use Drupal\mukurtu_protocol\Entity\ProtocolControl;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\taxonomy\Entity\Term;

function mukurtu_demo_content_create_communities($communityMetadata) {
  $admin = User::load(1);
  $communities = [];
  $protocols = [];

  foreach ($communityMetadata as $name => $metadata) {
    $communities[$name] = Community::create(['name' => $metadata['name']])
      ->setDescription($metadata['description'])
      ->setSharingSetting($metadata['sharing']);
    $communities[$name]->save();
    $communities[$name]->addMember($admin)->setRoles($admin, ['community_manager']);
    $protocols[$name] = [];

    foreach ($metadata['protocols'] as $protocolName => $protocolMetadata) {
      $protocol = Protocol::create(['name' => $protocolMetadata['name']])
        ->setSharingSetting($protocolMetadata['sharing'])
        ->setCommunities([$communities[$name]]);
      $protocol->save();
      $protocol->addMember($admin)->setRoles($admin, ['protocol_steward']);
      $protocols[$name][$protocolName] = $protocol;
    }

    // Banner.
    $pce = ProtocolControl::create([
      'field_sharing_setting' => 'any',
    ])->setProtocols($protocols[$name]);

    $file_data = file_get_contents($metadata['banner_url']);
    $path = parse_url($metadata['banner_url'], PHP_URL_PATH);
    $file = \Drupal::service('file.repository')->writeData($file_data, "private://" . basename($path));
    $banner = Media::create([
      'bundle' => 'image',
      'uid' => 1,
      'field_media_image' => [
        'target_id' => $file->id(),
        'alt' => "{$metadata['name']} banner image",
      ],
      'field_protocol_control' => $pce,
    ]);
    $banner->save();
    $communities[$name]->setBannerImage($banner);

    // Thumbnail.
    $pce = ProtocolControl::create([
      'field_sharing_setting' => 'any',
    ])->setProtocols($protocols[$name]);
    $file_data = file_get_contents($metadata['thumbnail_url']);
    $path = parse_url($metadata['thumbnail_url'], PHP_URL_PATH);
    $file = \Drupal::service('file.repository')->writeData($file_data, "private://" . basename($path));
    $thumb = Media::create([
      'bundle' => 'image',
      'uid' => 1,
      'field_media_image' => [
        'target_id' => $file->id(),
        'alt' => "{$metadata['name']} thumbnail image",
      ],
      'field_protocol_control' => $pce,
    ]);
    $thumb->save();
    $communities[$name]->setThumbnailImage($thumb);

    $communities[$name]->save();
  }

  return [$communities, $protocols];
}

function mukurtu_demo_content_create_image($url, $protocols) {
  $pce = ProtocolControl::create([
    'field_sharing_setting' => 'any',
  ])->setProtocols($protocols);
  $file_data = file_get_contents($url);
  $path = parse_url($url, PHP_URL_PATH);
  $file = \Drupal::service('file.repository')->writeData($file_data, "private://" . basename($path));
  $image = Media::create([
    'bundle' => 'image',
    'uid' => 1,
    'field_media_image' => [
      'target_id' => $file->id(),
      'alt' => "Media Asset",
    ],
    'field_protocol_control' => $pce,
  ]);
  $image->save();
  return $image;
}

function mukurtu_demo_content_create_terms($terms, $vocab) {
  $newterms = [];
  foreach ($terms as $term) {
    $query = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', $vocab)
    ->condition('name', $term);
    $results = $query->execute();

    if (!empty($results)) {
      $newterm = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load(reset($results));
    } else {
      $newterm = Term::create(['vid' => $vocab, 'name' => $term]);
      $newterm->save();
    }
    $newterms[] = $newterm;
  }
  return $newterms;
}

function mukurtu_demo_content_create_digital_heritage($dhmetadata) {
  $content = [];
  foreach ($dhmetadata as $name => $metadata) {
    $pce = ProtocolControl::create([
      'field_sharing_setting' => 'any',
    ])->setProtocols($metadata['protocols']);

    $image = mukurtu_demo_content_create_image($metadata['media_url'], $metadata['protocols']);

    $content[$name] = Node::create([
      'title' => $metadata['title'],
      'type' => 'digital_heritage',
      'field_description'  => $metadata['description'],
      'field_protocol_control' => $pce,
      'field_media_assets' => [$image],
      'field_category' => mukurtu_demo_content_create_terms($metadata['categories'], 'category'),
      'field_keywords' => mukurtu_demo_content_create_terms($metadata['keywords'], 'keywords'),
      'field_creator' => mukurtu_demo_content_create_terms($metadata['creator'], 'creator'),
      'field_language' => mukurtu_demo_content_create_terms($metadata['language'], 'language'),
      'field_rights' => $metadata['rights'],
      'field_source' => $metadata['source'],
      'field_identifier' => $metadata['identifier'],
      'field_format' => mukurtu_demo_content_create_terms($metadata['format'], 'format'),
      'field_publisher' => mukurtu_demo_content_create_terms($metadata['publisher'], 'publisher'),
      'field_people' => mukurtu_demo_content_create_terms($metadata['people'], 'people'),
      'field_contributor' => mukurtu_demo_content_create_terms($metadata['contributor'], 'contributor'),
      'field_type' => mukurtu_demo_content_create_terms($metadata['type'], 'type'),
    ]);
    $content[$name]->save();
  }

  return $content;
}
