:root {
  // Horizontal spacing.
  --gutter-s: var(--v-space-3xs); // 24px
  --gutter-m: var(--v-space-2xs); // 32px
  --gutter: var(--gutter-s); // Dynamic responsive value.

  @include media('>=md') {
    --gutter: var(--gutter-m);
  }

  // Dynamic layout external padding.
  --layout-padding-xs: var(--v-space-3xs); // 24px
  --layout-padding-s: var(--v-space-s); // 48px
  --layout-padding-m: var(--v-space-xl); // 72px
  --layout-padding-l: var(--v-space-2xl); // 80px
  --layout-padding: var(--layout-padding-xs); // 24px (default)

  @include media('>=md') {
    --layout-padding: var(--layout-padding-s); // 48px
  }

  @include media('>=xl') {
    --layout-padding: var(--layout-padding-m); // 72px
  }

  @include media('>=2xl') {
    --layout-padding: 0;
  }

  --layout-padding-full-width: var(--layout-padding-xs); // 24px (default)

  @include media('>=md') {
    --layout-padding-full-width: var(--layout-padding-s); // 48px
  }

  @include media('>=xl') {
    --layout-padding-full-width: var(--layout-padding-m); // 72px
  }

  // Basic reusable grid settings for grid-template-columns.
  --grid-1col: repeat(1, minmax(0, 1fr));
  --grid-2col: repeat(2, minmax(0, 1fr));
  --grid-3col: repeat(3, minmax(0, 1fr));
  --grid-4col: repeat(4, minmax(0, 1fr));
  --grid-5col: repeat(5, minmax(0, 1fr));
  --grid-6col: repeat(6, minmax(0, 1fr));
  --grid-7col: repeat(7, minmax(0, 1fr));
  --grid-8col: repeat(8, minmax(0, 1fr));
  --grid-9col: repeat(9, minmax(0, 1fr));
  --grid-10col: repeat(10, minmax(0, 1fr));
  --grid-11col: repeat(11, minmax(0, 1fr));
  --grid-12col: repeat(12, minmax(0, 1fr));
  // Layout variables.
  // 1280px maxwidth from the designs.
  // 4.833rem calculation comes from:
  // Gutter calculation: 11 (gutters) * 32px (max gutter width) = 352px
  // Col maxwidth calculation: 352px - 1280px (maxwidth) = 928px
  // Per col calculation: 928px (col maxwidth) / 12 (cols) = 77.33px (4.833rem)
  --grid-12col-max-width: repeat(12, minmax(0, 4.833rem));
}

// This layout fully uses grid i.e. no margin: auto either side.
// Useful if you need to have a background image or horizontal border running
// the full width of the page.
@mixin layout--full-width-grid {
  display: grid;
  grid-template-columns: var(--grid-6col);
  padding-right: var(--layout-padding);
  padding-left: var(--layout-padding);
  column-gap: var(--gutter);

  @include media('>=lg') {
    grid-template-columns: var(--grid-12col);
  }


  @include media('>=2xl') {
    grid-template-columns: minmax(0, auto) var(--grid-12col-max-width) minmax(0, auto);
  }
}

// This layout fully uses grid i.e. no margin: no padding either size.
// Useful if you need to have a background image or horizontal border running
// the full width of the page with no padding.
@mixin layout--full-width-grid-no-padding {
  display: grid;
  grid-template-columns: var(--grid-6col);
  padding-left: 0;
  padding-right: 0;
  column-gap: var(--gutter);

  @include media('>=lg') {
    grid-template-columns: var(--grid-12col);
  }

  @include media('>=2xl') {
    grid-template-columns: minmax(0, auto) var(--grid-12col-max-width) minmax(0, auto);
  }
}

@mixin layout--full-width-grid-only2xl {
  display: grid;
  grid-template-columns: minmax(0, auto) var(--grid-12col-max-width) minmax(0, auto);
  column-gap: var(--gutter);
}

@mixin layout--full-width-grid-item {
  display: grid;
  grid-column: 1 / -1;

  @include media('>=2xl') {
    grid-column: 2 / -2;
  }
}

@mixin layout--twocol-grid {
  display: grid;
  grid-template-columns: var(--grid-2col);
  grid-gap: 10px var(--gutter);
}

@mixin layout--threecol-grid {
  display: grid;
  grid-template-columns: var(--grid-3col);
  grid-gap: 10px var(--gutter);
}

.layout--full-width-grid {
  @include layout--full-width-grid;
}

.layout--full-width-grid-item {
  @include layout--full-width-grid-item;
}

// Add top/bottom padding to each component block.
.layout__region--content>.block {
  padding-top: var(--v-separation);
  padding-bottom: var(--v-separation);
}
